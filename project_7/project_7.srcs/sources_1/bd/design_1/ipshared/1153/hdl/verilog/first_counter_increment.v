// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module first_counter_increment (
        ap_clk,
        ap_rst,
        enable,
        out_counter,
        out_counter_ap_vld,
        first_counter_count_V_i,
        first_counter_count_V_o,
        first_counter_count_V_o_ap_vld
);

parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   enable;
output  [3:0] out_counter;
output   out_counter_ap_vld;
input  [3:0] first_counter_count_V_i;
output  [3:0] first_counter_count_V_o;
output   first_counter_count_V_o_ap_vld;

reg out_counter_ap_vld;
reg first_counter_count_V_o_ap_vld;

wire   [0:0] tmp_read_fu_68_p2;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [3:0] v_V_fu_94_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_read_fu_68_p2 == 1'd1))) begin
        first_counter_count_V_o_ap_vld = 1'b1;
    end else begin
        first_counter_count_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_read_fu_68_p2 == 1'd1))) begin
        out_counter_ap_vld = 1'b1;
    end else begin
        out_counter_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign first_counter_count_V_o = v_V_fu_94_p2;

assign out_counter = v_V_fu_94_p2;

assign tmp_read_fu_68_p2 = enable;

assign v_V_fu_94_p2 = (first_counter_count_V_i + 4'd1);

endmodule //first_counter_increment
