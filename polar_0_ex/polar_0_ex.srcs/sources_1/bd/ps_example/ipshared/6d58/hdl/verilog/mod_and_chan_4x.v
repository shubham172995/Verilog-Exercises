// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mod_and_chan_4x,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.189000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=76,HLS_SYN_DSP=64,HLS_SYN_FF=15185,HLS_SYN_LUT=18099}" *)

module mod_and_chan_4x (
        ap_clk,
        ap_rst_n,
        ctrl_in_V_TDATA,
        ctrl_in_V_TVALID,
        ctrl_in_V_TREADY,
        ctrl_out_V_TDATA,
        ctrl_out_V_TVALID,
        ctrl_out_V_TREADY,
        hard_data_V_V_TDATA,
        hard_data_V_V_TVALID,
        hard_data_V_V_TREADY,
        chan_data_1_V_TDATA,
        chan_data_1_V_TVALID,
        chan_data_1_V_TREADY,
        chan_data_2_V_TDATA,
        chan_data_2_V_TVALID,
        chan_data_2_V_TREADY,
        chan_data_3_V_TDATA,
        chan_data_3_V_TVALID,
        chan_data_3_V_TREADY,
        chan_data_4_V_TDATA,
        chan_data_4_V_TVALID,
        chan_data_4_V_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state23 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input  [63:0] ctrl_in_V_TDATA;
input   ctrl_in_V_TVALID;
output   ctrl_in_V_TREADY;
output  [63:0] ctrl_out_V_TDATA;
output   ctrl_out_V_TVALID;
input   ctrl_out_V_TREADY;
input  [95:0] hard_data_V_V_TDATA;
input   hard_data_V_V_TVALID;
output   hard_data_V_V_TREADY;
output  [39:0] chan_data_1_V_TDATA;
output   chan_data_1_V_TVALID;
input   chan_data_1_V_TREADY;
output  [39:0] chan_data_2_V_TDATA;
output   chan_data_2_V_TVALID;
input   chan_data_2_V_TREADY;
output  [39:0] chan_data_3_V_TDATA;
output   chan_data_3_V_TVALID;
input   chan_data_3_V_TREADY;
output  [39:0] chan_data_4_V_TDATA;
output   chan_data_4_V_TVALID;
input   chan_data_4_V_TREADY;

reg    ap_rst_n_inv;
reg   [63:0] ctrl_in_V_0_data_out;
wire    ctrl_in_V_0_vld_in;
wire    ctrl_in_V_0_vld_out;
wire    ctrl_in_V_0_ack_in;
reg    ctrl_in_V_0_ack_out;
reg   [63:0] ctrl_in_V_0_payload_A;
reg   [63:0] ctrl_in_V_0_payload_B;
reg    ctrl_in_V_0_sel_rd;
reg    ctrl_in_V_0_sel_wr;
wire    ctrl_in_V_0_sel;
wire    ctrl_in_V_0_load_A;
wire    ctrl_in_V_0_load_B;
reg   [1:0] ctrl_in_V_0_state;
wire    ctrl_in_V_0_state_cmp_full;
reg   [63:0] ctrl_out_V_1_data_out;
reg    ctrl_out_V_1_vld_in;
wire    ctrl_out_V_1_vld_out;
wire    ctrl_out_V_1_ack_in;
wire    ctrl_out_V_1_ack_out;
reg   [63:0] ctrl_out_V_1_payload_A;
reg   [63:0] ctrl_out_V_1_payload_B;
reg    ctrl_out_V_1_sel_rd;
reg    ctrl_out_V_1_sel_wr;
wire    ctrl_out_V_1_sel;
wire    ctrl_out_V_1_load_A;
wire    ctrl_out_V_1_load_B;
reg   [1:0] ctrl_out_V_1_state;
wire    ctrl_out_V_1_state_cmp_full;
reg   [95:0] hard_data_V_V_0_data_out;
wire    hard_data_V_V_0_vld_in;
wire    hard_data_V_V_0_vld_out;
wire    hard_data_V_V_0_ack_in;
reg    hard_data_V_V_0_ack_out;
reg   [95:0] hard_data_V_V_0_payload_A;
reg   [95:0] hard_data_V_V_0_payload_B;
reg    hard_data_V_V_0_sel_rd;
reg    hard_data_V_V_0_sel_wr;
wire    hard_data_V_V_0_sel;
wire    hard_data_V_V_0_load_A;
wire    hard_data_V_V_0_load_B;
reg   [1:0] hard_data_V_V_0_state;
wire    hard_data_V_V_0_state_cmp_full;
reg   [39:0] chan_data_1_V_1_data_out;
reg    chan_data_1_V_1_vld_in;
wire    chan_data_1_V_1_vld_out;
wire    chan_data_1_V_1_ack_in;
wire    chan_data_1_V_1_ack_out;
reg   [39:0] chan_data_1_V_1_payload_A;
reg   [39:0] chan_data_1_V_1_payload_B;
reg    chan_data_1_V_1_sel_rd;
reg    chan_data_1_V_1_sel_wr;
wire    chan_data_1_V_1_sel;
wire    chan_data_1_V_1_load_A;
wire    chan_data_1_V_1_load_B;
reg   [1:0] chan_data_1_V_1_state;
wire    chan_data_1_V_1_state_cmp_full;
reg   [39:0] chan_data_2_V_1_data_out;
reg    chan_data_2_V_1_vld_in;
wire    chan_data_2_V_1_vld_out;
wire    chan_data_2_V_1_ack_in;
wire    chan_data_2_V_1_ack_out;
reg   [39:0] chan_data_2_V_1_payload_A;
reg   [39:0] chan_data_2_V_1_payload_B;
reg    chan_data_2_V_1_sel_rd;
reg    chan_data_2_V_1_sel_wr;
wire    chan_data_2_V_1_sel;
wire    chan_data_2_V_1_load_A;
wire    chan_data_2_V_1_load_B;
reg   [1:0] chan_data_2_V_1_state;
wire    chan_data_2_V_1_state_cmp_full;
reg   [39:0] chan_data_3_V_1_data_out;
reg    chan_data_3_V_1_vld_in;
wire    chan_data_3_V_1_vld_out;
wire    chan_data_3_V_1_ack_in;
wire    chan_data_3_V_1_ack_out;
reg   [39:0] chan_data_3_V_1_payload_A;
reg   [39:0] chan_data_3_V_1_payload_B;
reg    chan_data_3_V_1_sel_rd;
reg    chan_data_3_V_1_sel_wr;
wire    chan_data_3_V_1_sel;
wire    chan_data_3_V_1_load_A;
wire    chan_data_3_V_1_load_B;
reg   [1:0] chan_data_3_V_1_state;
wire    chan_data_3_V_1_state_cmp_full;
reg   [39:0] chan_data_4_V_1_data_out;
reg    chan_data_4_V_1_vld_in;
wire    chan_data_4_V_1_vld_out;
wire    chan_data_4_V_1_ack_in;
wire    chan_data_4_V_1_ack_out;
reg   [39:0] chan_data_4_V_1_payload_A;
reg   [39:0] chan_data_4_V_1_payload_B;
reg    chan_data_4_V_1_sel_rd;
reg    chan_data_4_V_1_sel_wr;
wire    chan_data_4_V_1_sel;
wire    chan_data_4_V_1_load_A;
wire    chan_data_4_V_1_load_B;
reg   [1:0] chan_data_4_V_1_state;
wire    chan_data_4_V_1_state_cmp_full;
wire   [3:0] QAM16_LUT_M_real_V_address0;
reg    QAM16_LUT_M_real_V_ce0;
wire   [14:0] QAM16_LUT_M_real_V_q0;
wire   [3:0] QAM16_LUT_M_real_V_address1;
reg    QAM16_LUT_M_real_V_ce1;
wire   [14:0] QAM16_LUT_M_real_V_q1;
wire   [3:0] QAM16_LUT_M_real_V_address2;
reg    QAM16_LUT_M_real_V_ce2;
wire   [14:0] QAM16_LUT_M_real_V_q2;
wire   [3:0] QAM16_LUT_M_real_V_address3;
reg    QAM16_LUT_M_real_V_ce3;
wire   [14:0] QAM16_LUT_M_real_V_q3;
wire   [3:0] QAM16_LUT_M_imag_V_address0;
reg    QAM16_LUT_M_imag_V_ce0;
wire   [14:0] QAM16_LUT_M_imag_V_q0;
wire   [3:0] QAM16_LUT_M_imag_V_address1;
reg    QAM16_LUT_M_imag_V_ce1;
wire   [14:0] QAM16_LUT_M_imag_V_q1;
wire   [3:0] QAM16_LUT_M_imag_V_address2;
reg    QAM16_LUT_M_imag_V_ce2;
wire   [14:0] QAM16_LUT_M_imag_V_q2;
wire   [3:0] QAM16_LUT_M_imag_V_address3;
reg    QAM16_LUT_M_imag_V_ce3;
wire   [14:0] QAM16_LUT_M_imag_V_q3;
wire   [5:0] QAM64_LUT_M_real_V_address0;
reg    QAM64_LUT_M_real_V_ce0;
wire   [15:0] QAM64_LUT_M_real_V_q0;
wire   [5:0] QAM64_LUT_M_real_V_address1;
reg    QAM64_LUT_M_real_V_ce1;
wire   [15:0] QAM64_LUT_M_real_V_q1;
wire   [5:0] QAM64_LUT_M_real_V_address2;
reg    QAM64_LUT_M_real_V_ce2;
wire   [15:0] QAM64_LUT_M_real_V_q2;
wire   [5:0] QAM64_LUT_M_real_V_address3;
reg    QAM64_LUT_M_real_V_ce3;
wire   [15:0] QAM64_LUT_M_real_V_q3;
wire   [5:0] QAM64_LUT_M_imag_V_address0;
reg    QAM64_LUT_M_imag_V_ce0;
wire   [15:0] QAM64_LUT_M_imag_V_q0;
wire   [5:0] QAM64_LUT_M_imag_V_address1;
reg    QAM64_LUT_M_imag_V_ce1;
wire   [15:0] QAM64_LUT_M_imag_V_q1;
wire   [5:0] QAM64_LUT_M_imag_V_address2;
reg    QAM64_LUT_M_imag_V_ce2;
wire   [15:0] QAM64_LUT_M_imag_V_q2;
wire   [5:0] QAM64_LUT_M_imag_V_address3;
reg    QAM64_LUT_M_imag_V_ce3;
wire   [15:0] QAM64_LUT_M_imag_V_q3;
reg    ctrl_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    ctrl_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    hard_data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_9_reg_2203;
reg   [0:0] tmp_10_reg_2207;
reg    chan_data_1_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter16;
reg   [0:0] tmp_9_reg_2203_pp0_iter15_reg;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] tmp_9_reg_2203_pp0_iter16_reg;
reg    chan_data_2_V_TDATA_blk_n;
reg    chan_data_3_V_TDATA_blk_n;
reg    chan_data_4_V_TDATA_blk_n;
reg   [95:0] p_3_reg_471;
reg   [13:0] symbols_reg_483;
reg   [2:0] ctrl_mod_type_V_reg_2023;
reg   [0:0] ctrl_skip_chan_V_reg_2032;
wire   [16:0] ctrl_snr_V_fu_633_p4;
reg   [16:0] ctrl_snr_V_reg_2044;
reg   [13:0] ctrl_block_symbls_V_reg_2049;
wire  signed [63:0] tmp_1_cast_fu_653_p1;
wire   [0:0] tmp_8_fu_672_p2;
reg   [0:0] tmp_8_reg_2059;
wire   [0:0] sel_tmp2_fu_684_p2;
reg   [0:0] sel_tmp2_reg_2065;
wire   [0:0] or_cond_fu_690_p2;
reg   [0:0] or_cond_reg_2071;
wire   [1:0] sh_assign_fu_727_p3;
reg   [1:0] sh_assign_reg_2077;
reg   [0:0] signbit_reg_2082;
wire   [7:0] p_Val2_4_fu_777_p2;
reg   [7:0] p_Val2_4_reg_2089;
wire   [0:0] carry_fu_797_p2;
reg   [0:0] carry_reg_2095;
reg   [1:0] p_Result_4_reg_2101;
wire   [20:0] sh_assign_cast_fu_834_p1;
reg   [20:0] sh_assign_cast_reg_2107;
wire    ap_CS_fsm_state4;
wire   [7:0] awgn_snr_V_fu_918_p3;
reg   [7:0] awgn_snr_V_reg_2119;
wire   [7:0] tmp_13_cast_fu_926_p1;
reg   [7:0] tmp_13_cast_reg_2131;
wire   [95:0] tmp_5_fu_934_p1;
reg   [95:0] tmp_5_reg_2137;
wire   [7:0] tmp_20_cast_fu_944_p1;
reg   [7:0] tmp_20_cast_reg_2142;
wire   [0:0] sel_tmp_fu_948_p2;
reg   [0:0] sel_tmp_reg_2147;
wire   [0:0] sel_tmp5_fu_953_p2;
reg   [0:0] sel_tmp5_reg_2155;
wire   [0:0] sel_tmp7_fu_958_p2;
reg   [0:0] sel_tmp7_reg_2171;
wire   [0:0] sel_tmp9_fu_963_p2;
reg   [0:0] sel_tmp9_reg_2187;
wire   [0:0] tmp_9_fu_968_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_predicate_op130_read_state6;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
reg    ap_block_state21_io;
wire    ap_block_state22_pp0_stage0_iter17;
reg    ap_block_state22_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_9_reg_2203_pp0_iter1_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter2_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter3_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter4_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter5_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter6_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter7_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter8_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter9_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter10_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter11_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter12_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter13_reg;
reg   [0:0] tmp_9_reg_2203_pp0_iter14_reg;
wire   [0:0] tmp_10_fu_977_p2;
reg   [0:0] tmp_10_reg_2207_pp0_iter1_reg;
wire   [13:0] symbols_V_1_fu_1002_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] symbol_1_V_fu_1017_p1;
reg   [5:0] symbol_1_V_reg_2221;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter3_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter4_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter5_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter6_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter7_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter8_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter9_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter10_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter11_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter12_reg;
reg   [5:0] symbol_1_V_reg_2221_pp0_iter13_reg;
wire   [5:0] symbol_2_V_8_fu_1122_p3;
reg   [5:0] symbol_2_V_8_reg_2229;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter3_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter4_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter5_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter6_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter7_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter8_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter9_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter10_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter11_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter12_reg;
reg   [5:0] symbol_2_V_8_reg_2229_pp0_iter13_reg;
wire   [5:0] symbol_3_V_10_fu_1150_p3;
reg   [5:0] symbol_3_V_10_reg_2234;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter3_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter4_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter5_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter6_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter7_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter8_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter9_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter10_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter11_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter12_reg;
reg   [5:0] symbol_3_V_10_reg_2234_pp0_iter13_reg;
wire   [5:0] p_Val2_38_fu_1178_p3;
reg   [5:0] p_Val2_38_reg_2239;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter3_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter4_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter5_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter6_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter7_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter8_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter9_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter10_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter11_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter12_reg;
reg   [5:0] p_Val2_38_reg_2239_pp0_iter13_reg;
wire   [95:0] r_V_fu_1185_p2;
reg   [95:0] r_V_reg_2244;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] tmp_19_fu_1190_p1;
reg   [0:0] tmp_19_reg_2249;
reg   [0:0] tmp_19_reg_2249_pp0_iter3_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter4_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter5_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter6_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter7_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter8_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter9_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter10_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter11_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter12_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter13_reg;
reg   [0:0] tmp_19_reg_2249_pp0_iter14_reg;
wire   [1:0] tmp_20_fu_1194_p1;
reg   [1:0] tmp_20_reg_2254;
reg   [1:0] tmp_20_reg_2254_pp0_iter3_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter4_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter5_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter6_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter7_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter8_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter9_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter10_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter11_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter12_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter13_reg;
reg   [1:0] tmp_20_reg_2254_pp0_iter14_reg;
wire   [3:0] tmp_21_fu_1198_p1;
reg   [3:0] tmp_21_reg_2260;
reg   [3:0] tmp_21_reg_2260_pp0_iter3_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter4_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter5_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter6_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter7_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter8_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter9_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter10_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter11_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter12_reg;
reg   [3:0] tmp_21_reg_2260_pp0_iter13_reg;
wire   [0:0] tmp_22_fu_1202_p1;
reg   [0:0] tmp_22_reg_2265;
reg   [0:0] tmp_22_reg_2265_pp0_iter3_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter4_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter5_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter6_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter7_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter8_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter9_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter10_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter11_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter12_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter13_reg;
reg   [0:0] tmp_22_reg_2265_pp0_iter14_reg;
wire   [1:0] tmp_23_fu_1206_p1;
reg   [1:0] tmp_23_reg_2270;
reg   [1:0] tmp_23_reg_2270_pp0_iter3_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter4_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter5_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter6_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter7_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter8_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter9_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter10_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter11_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter12_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter13_reg;
reg   [1:0] tmp_23_reg_2270_pp0_iter14_reg;
wire   [3:0] tmp_24_fu_1210_p1;
reg   [3:0] tmp_24_reg_2276;
reg   [3:0] tmp_24_reg_2276_pp0_iter3_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter4_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter5_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter6_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter7_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter8_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter9_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter10_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter11_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter12_reg;
reg   [3:0] tmp_24_reg_2276_pp0_iter13_reg;
wire   [0:0] tmp_25_fu_1214_p1;
reg   [0:0] tmp_25_reg_2281;
reg   [0:0] tmp_25_reg_2281_pp0_iter3_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter4_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter5_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter6_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter7_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter8_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter9_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter10_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter11_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter12_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter13_reg;
reg   [0:0] tmp_25_reg_2281_pp0_iter14_reg;
wire   [1:0] tmp_26_fu_1218_p1;
reg   [1:0] tmp_26_reg_2286;
reg   [1:0] tmp_26_reg_2286_pp0_iter3_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter4_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter5_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter6_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter7_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter8_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter9_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter10_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter11_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter12_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter13_reg;
reg   [1:0] tmp_26_reg_2286_pp0_iter14_reg;
wire   [3:0] tmp_27_fu_1222_p1;
reg   [3:0] tmp_27_reg_2292;
reg   [3:0] tmp_27_reg_2292_pp0_iter3_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter4_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter5_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter6_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter7_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter8_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter9_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter10_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter11_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter12_reg;
reg   [3:0] tmp_27_reg_2292_pp0_iter13_reg;
wire   [0:0] tmp_16_fu_1268_p1;
reg   [0:0] tmp_16_reg_2297;
wire   [1:0] tmp_17_fu_1272_p1;
reg   [1:0] tmp_17_reg_2302;
wire   [15:0] p_Val2_37_fu_1382_p3;
reg   [15:0] p_Val2_37_reg_2388;
wire   [15:0] p_Val2_21_fu_1403_p3;
reg   [15:0] p_Val2_21_reg_2393;
wire   [15:0] p_Val2_22_fu_1465_p3;
reg   [15:0] p_Val2_22_reg_2398;
wire   [15:0] p_Val2_23_fu_1486_p3;
reg   [15:0] p_Val2_23_reg_2403;
wire   [15:0] p_Val2_24_fu_1548_p3;
reg   [15:0] p_Val2_24_reg_2408;
wire   [15:0] p_Val2_25_fu_1569_p3;
reg   [15:0] p_Val2_25_reg_2413;
wire   [15:0] p_Val2_26_fu_1631_p3;
reg   [15:0] p_Val2_26_reg_2418;
wire   [15:0] p_Val2_27_fu_1652_p3;
reg   [15:0] p_Val2_27_reg_2423;
wire  signed [39:0] cast1_fu_1947_p1;
wire  signed [39:0] cast2_fu_1960_p1;
wire  signed [39:0] cast3_fu_1973_p1;
wire  signed [39:0] cast4_fu_1986_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire    grp_awgn_real1_fu_502_ap_start;
wire    grp_awgn_real1_fu_502_ap_done;
wire    grp_awgn_real1_fu_502_ap_idle;
wire    grp_awgn_real1_fu_502_ap_ready;
reg    grp_awgn_real1_fu_502_ap_ce;
wire   [17:0] grp_awgn_real1_fu_502_ap_return;
wire    grp_awgn_imag1_fu_515_ap_start;
wire    grp_awgn_imag1_fu_515_ap_done;
wire    grp_awgn_imag1_fu_515_ap_idle;
wire    grp_awgn_imag1_fu_515_ap_ready;
reg    grp_awgn_imag1_fu_515_ap_ce;
wire   [17:0] grp_awgn_imag1_fu_515_ap_return;
wire    grp_awgn_real2_fu_528_ap_start;
wire    grp_awgn_real2_fu_528_ap_done;
wire    grp_awgn_real2_fu_528_ap_idle;
wire    grp_awgn_real2_fu_528_ap_ready;
reg    grp_awgn_real2_fu_528_ap_ce;
wire   [17:0] grp_awgn_real2_fu_528_ap_return;
wire    grp_awgn_imag2_fu_541_ap_start;
wire    grp_awgn_imag2_fu_541_ap_done;
wire    grp_awgn_imag2_fu_541_ap_idle;
wire    grp_awgn_imag2_fu_541_ap_ready;
reg    grp_awgn_imag2_fu_541_ap_ce;
wire   [17:0] grp_awgn_imag2_fu_541_ap_return;
wire    grp_awgn_real3_fu_554_ap_start;
wire    grp_awgn_real3_fu_554_ap_done;
wire    grp_awgn_real3_fu_554_ap_idle;
wire    grp_awgn_real3_fu_554_ap_ready;
reg    grp_awgn_real3_fu_554_ap_ce;
wire   [17:0] grp_awgn_real3_fu_554_ap_return;
wire    grp_awgn_imag3_fu_567_ap_start;
wire    grp_awgn_imag3_fu_567_ap_done;
wire    grp_awgn_imag3_fu_567_ap_idle;
wire    grp_awgn_imag3_fu_567_ap_ready;
reg    grp_awgn_imag3_fu_567_ap_ce;
wire   [17:0] grp_awgn_imag3_fu_567_ap_return;
wire    grp_awgn_real4_fu_580_ap_start;
wire    grp_awgn_real4_fu_580_ap_done;
wire    grp_awgn_real4_fu_580_ap_idle;
wire    grp_awgn_real4_fu_580_ap_ready;
reg    grp_awgn_real4_fu_580_ap_ce;
wire   [17:0] grp_awgn_real4_fu_580_ap_return;
wire    grp_awgn_imag4_fu_593_ap_start;
wire    grp_awgn_imag4_fu_593_ap_done;
wire    grp_awgn_imag4_fu_593_ap_idle;
wire    grp_awgn_imag4_fu_593_ap_ready;
reg    grp_awgn_imag4_fu_593_ap_ce;
wire   [17:0] grp_awgn_imag4_fu_593_ap_return;
reg   [95:0] ap_phi_mux_p_3_phi_fu_475_p4;
reg   [95:0] ap_phi_mux_p_Val2_5_phi_fu_495_p4;
wire   [95:0] ap_phi_reg_pp0_iter0_p_Val2_5_reg_492;
reg   [95:0] ap_phi_reg_pp0_iter1_p_Val2_5_reg_492;
reg   [95:0] ap_phi_reg_pp0_iter2_p_Val2_5_reg_492;
reg    grp_awgn_real1_fu_502_ap_start_reg;
reg    grp_awgn_imag1_fu_515_ap_start_reg;
reg    grp_awgn_real2_fu_528_ap_start_reg;
reg    grp_awgn_imag2_fu_541_ap_start_reg;
reg    grp_awgn_real3_fu_554_ap_start_reg;
reg    grp_awgn_imag3_fu_567_ap_start_reg;
reg    grp_awgn_real4_fu_580_ap_start_reg;
reg    grp_awgn_imag4_fu_593_ap_start_reg;
wire   [63:0] tmp_4_i_fu_1280_p1;
wire   [63:0] tmp_5_i_fu_1286_p1;
wire   [63:0] tmp_1_i_fu_1292_p1;
wire   [63:0] tmp_2_i_fu_1297_p1;
wire   [63:0] tmp_7_i_fu_1302_p1;
wire   [63:0] tmp_8_i_fu_1307_p1;
wire   [63:0] tmp_3_i_fu_1312_p1;
wire   [63:0] tmp_4_i1_fu_1317_p1;
reg   [5:0] p_Result_s_fu_224;
reg   [5:0] p_Result_1_fu_228;
reg   [5:0] p_Result_2_fu_232;
reg   [5:0] p_Result_3_fu_236;
wire   [5:0] symbol_1_V_5_fu_1262_p3;
reg   [7:0] remaining_bits_fu_240;
wire    ap_CS_fsm_state1;
wire   [7:0] remaining_bits_2_fu_982_p2;
wire   [7:0] remaining_bits_1_fu_992_p2;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] tmp_1_fu_611_p1;
wire   [0:0] tmp_6_fu_658_p2;
wire   [0:0] tmp_fu_664_p3;
wire   [0:0] sel_tmp1_fu_678_p2;
wire   [16:0] newSel_fu_699_p3;
wire   [16:0] newSel143_cast_cast_fu_706_p3;
wire   [1:0] sel_tmp3_fu_720_p3;
wire   [1:0] p_8_cast_fu_696_p1;
wire   [16:0] p_Val2_1_fu_713_p3;
wire   [16:0] snr_mod_V_fu_734_p2;
wire   [0:0] tmp_12_fu_757_p3;
wire   [7:0] tmp_s_fu_765_p1;
wire   [7:0] p_Val2_3_fu_747_p4;
wire   [0:0] tmp_14_fu_783_p3;
wire   [0:0] tmp_13_fu_769_p3;
wire   [0:0] tmp_2_fu_791_p2;
wire   [0:0] Range1_all_ones_fu_837_p2;
wire   [0:0] Range1_all_zeros_fu_842_p2;
wire   [0:0] p_38_i_fu_854_p2;
wire   [0:0] tmp_3_fu_859_p2;
wire   [0:0] deleted_zeros_fu_847_p3;
wire   [0:0] signbit_not_fu_875_p2;
wire   [0:0] p_39_demorgan_i_fu_870_p2;
wire   [0:0] neg_src_not_fu_880_p2;
wire   [0:0] p_39_demorgan_i_not_fu_892_p2;
wire   [0:0] brmerge_i_i_not_fu_886_p2;
wire   [0:0] neg_src_fu_865_p2;
wire   [0:0] brmerge_fu_898_p2;
wire   [7:0] p_mux_fu_904_p3;
wire   [7:0] p_s_fu_911_p3;
wire   [5:0] p_2_fu_813_p10;
wire   [6:0] tmp_14_cast_fu_930_p1;
wire   [6:0] tmp_4_fu_938_p2;
wire   [5:0] symbol_4_V_3_fu_1061_p4;
wire   [5:0] symbol_3_V_9_fu_1051_p4;
wire   [5:0] symbol_2_V_4_fu_1101_p3;
wire   [5:0] symbol_3_V_8_fu_1031_p4;
wire   [5:0] symbol_2_V_5_fu_1108_p3;
wire   [5:0] symbol_2_V_fu_1021_p4;
wire   [5:0] symbol_2_V_6_fu_1115_p3;
wire   [5:0] symbol_3_V_1_fu_1081_p4;
wire   [5:0] symbol_3_V_fu_1071_p4;
wire   [5:0] symbol_3_V_2_fu_1129_p3;
wire   [5:0] symbol_3_V_3_fu_1136_p3;
wire   [5:0] symbol_3_V_4_fu_1143_p3;
wire   [5:0] symbol_4_V_2_fu_1091_p4;
wire   [5:0] sel_tmp4_fu_1157_p3;
wire   [5:0] sel_tmp6_fu_1164_p3;
wire   [5:0] symbol_4_V_fu_1041_p4;
wire   [5:0] sel_tmp8_fu_1171_p3;
wire   [5:0] symbol_1_V_1_fu_1244_p3;
wire   [5:0] symbol_1_V_2_fu_1250_p3;
wire   [5:0] symbol_1_V_3_fu_1256_p3;
wire   [3:0] tmp_18_fu_1276_p1;
wire  signed [15:0] channel_data_M_imag_2_fu_1364_p1;
wire   [15:0] channel_data_M_imag_fu_1347_p6;
wire   [15:0] sel_tmp10_fu_1368_p3;
wire   [15:0] channel_data_M_real_fu_1327_p3;
wire   [15:0] sel_tmp11_fu_1375_p3;
wire  signed [15:0] channel_data_M_real_3_fu_1360_p1;
wire   [15:0] channel_data_M_real_1_fu_1334_p6;
wire   [15:0] sel_tmp12_fu_1389_p3;
wire   [15:0] sel_tmp13_fu_1396_p3;
wire  signed [15:0] channel_data_M_imag_6_fu_1447_p1;
wire   [15:0] channel_data_M_imag_5_fu_1430_p6;
wire   [15:0] sel_tmp14_fu_1451_p3;
wire   [15:0] channel_data_M_real_6_fu_1410_p3;
wire   [15:0] sel_tmp15_fu_1458_p3;
wire  signed [15:0] channel_data_M_real_8_fu_1443_p1;
wire   [15:0] channel_data_M_real_7_fu_1417_p6;
wire   [15:0] sel_tmp16_fu_1472_p3;
wire   [15:0] sel_tmp17_fu_1479_p3;
wire  signed [15:0] channel_data_M_imag_11_fu_1530_p1;
wire   [15:0] channel_data_M_imag_9_fu_1513_p6;
wire   [15:0] sel_tmp18_fu_1534_p3;
wire   [15:0] channel_data_M_real_11_fu_1493_p3;
wire   [15:0] sel_tmp19_fu_1541_p3;
wire  signed [15:0] channel_data_M_real_14_fu_1526_p1;
wire   [15:0] channel_data_M_real_12_fu_1500_p6;
wire   [15:0] sel_tmp20_fu_1555_p3;
wire   [15:0] sel_tmp21_fu_1562_p3;
wire  signed [15:0] channel_data_M_imag_3_fu_1613_p1;
wire   [15:0] channel_data_M_imag_13_fu_1596_p6;
wire   [15:0] sel_tmp22_fu_1617_p3;
wire   [15:0] channel_data_M_real_16_fu_1576_p3;
wire   [15:0] sel_tmp23_fu_1624_p3;
wire  signed [15:0] channel_data_M_real_2_fu_1609_p1;
wire   [15:0] channel_data_M_real_17_fu_1583_p6;
wire   [15:0] sel_tmp24_fu_1638_p3;
wire   [15:0] sel_tmp25_fu_1645_p3;
wire  signed [20:0] tmp_cast_fu_1659_p1;
wire   [20:0] p_Val2_35_fu_1663_p2;
wire  signed [20:0] tmp_23_cast_fu_1678_p1;
wire   [20:0] p_Val2_6_fu_1682_p2;
wire  signed [20:0] tmp_26_cast_fu_1697_p1;
wire   [20:0] p_Val2_8_fu_1701_p2;
wire  signed [20:0] tmp_29_cast_fu_1716_p1;
wire   [20:0] p_Val2_10_fu_1720_p2;
wire  signed [20:0] tmp_32_cast_fu_1735_p1;
wire   [20:0] p_Val2_12_fu_1739_p2;
wire  signed [20:0] tmp_35_cast_fu_1754_p1;
wire   [20:0] p_Val2_14_fu_1758_p2;
wire  signed [20:0] tmp_38_cast_fu_1773_p1;
wire   [20:0] p_Val2_16_fu_1777_p2;
wire  signed [20:0] tmp_41_cast_fu_1792_p1;
wire   [20:0] p_Val2_18_fu_1796_p2;
wire   [18:0] p_Val2_36_fu_1668_p4;
wire  signed [18:0] err_sample_real_1_V_fu_1811_p1;
wire   [18:0] p_Val2_7_fu_1687_p4;
wire  signed [18:0] err_sample_imag_1_V_fu_1814_p1;
wire   [18:0] p_Val2_9_fu_1706_p4;
wire  signed [18:0] err_sample_real_2_V_fu_1817_p1;
wire   [18:0] p_Val2_11_fu_1725_p4;
wire  signed [18:0] err_sample_imag_2_V_fu_1820_p1;
wire   [18:0] p_Val2_13_fu_1744_p4;
wire  signed [18:0] err_sample_real_3_V_fu_1823_p1;
wire   [18:0] p_Val2_15_fu_1763_p4;
wire  signed [18:0] err_sample_imag_3_V_fu_1826_p1;
wire   [18:0] p_Val2_17_fu_1782_p4;
wire  signed [18:0] err_sample_real_4_V_fu_1829_p1;
wire   [18:0] p_Val2_19_fu_1801_p4;
wire  signed [18:0] err_sample_imag_4_V_fu_1832_p1;
wire   [18:0] err_sample_real_1_V_1_fu_1835_p2;
wire   [18:0] err_sample_imag_1_V_1_fu_1841_p2;
wire   [18:0] err_sample_real_2_V_1_fu_1847_p2;
wire   [18:0] err_sample_imag_2_V_1_fu_1853_p2;
wire   [18:0] err_sample_real_3_V_1_fu_1859_p2;
wire   [18:0] err_sample_imag_3_V_1_fu_1865_p2;
wire   [18:0] err_sample_real_4_V_1_fu_1871_p2;
wire   [18:0] err_sample_imag_4_V_1_fu_1877_p2;
wire   [18:0] err_sample_imag_1_V_3_fu_1890_p3;
wire   [18:0] err_sample_real_1_V_3_fu_1883_p3;
wire   [37:0] tmp_2_1_fu_1939_p3;
wire   [18:0] err_sample_imag_2_V_3_fu_1904_p3;
wire   [18:0] err_sample_real_2_V_3_fu_1897_p3;
wire   [37:0] tmp_3_1_fu_1952_p3;
wire   [18:0] err_sample_imag_3_V_3_fu_1918_p3;
wire   [18:0] err_sample_real_3_V_3_fu_1911_p3;
wire   [37:0] tmp_4_1_fu_1965_p3;
wire   [18:0] err_sample_imag_4_V_3_fu_1932_p3;
wire   [18:0] err_sample_real_4_V_3_fu_1925_p3;
wire   [37:0] tmp_5_1_fu_1978_p3;
reg   [5:0] ap_NS_fsm;
wire    ap_CS_fsm_state23;
reg    ap_block_state23;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1129;

// power-on initialization
initial begin
#0 ctrl_in_V_0_sel_rd = 1'b0;
#0 ctrl_in_V_0_sel_wr = 1'b0;
#0 ctrl_in_V_0_state = 2'd0;
#0 ctrl_out_V_1_sel_rd = 1'b0;
#0 ctrl_out_V_1_sel_wr = 1'b0;
#0 ctrl_out_V_1_state = 2'd0;
#0 hard_data_V_V_0_sel_rd = 1'b0;
#0 hard_data_V_V_0_sel_wr = 1'b0;
#0 hard_data_V_V_0_state = 2'd0;
#0 chan_data_1_V_1_sel_rd = 1'b0;
#0 chan_data_1_V_1_sel_wr = 1'b0;
#0 chan_data_1_V_1_state = 2'd0;
#0 chan_data_2_V_1_sel_rd = 1'b0;
#0 chan_data_2_V_1_sel_wr = 1'b0;
#0 chan_data_2_V_1_state = 2'd0;
#0 chan_data_3_V_1_sel_rd = 1'b0;
#0 chan_data_3_V_1_sel_wr = 1'b0;
#0 chan_data_3_V_1_state = 2'd0;
#0 chan_data_4_V_1_sel_rd = 1'b0;
#0 chan_data_4_V_1_sel_wr = 1'b0;
#0 chan_data_4_V_1_state = 2'd0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 grp_awgn_real1_fu_502_ap_start_reg = 1'b0;
#0 grp_awgn_imag1_fu_515_ap_start_reg = 1'b0;
#0 grp_awgn_real2_fu_528_ap_start_reg = 1'b0;
#0 grp_awgn_imag2_fu_541_ap_start_reg = 1'b0;
#0 grp_awgn_real3_fu_554_ap_start_reg = 1'b0;
#0 grp_awgn_imag3_fu_567_ap_start_reg = 1'b0;
#0 grp_awgn_real4_fu_580_ap_start_reg = 1'b0;
#0 grp_awgn_imag4_fu_593_ap_start_reg = 1'b0;
end

mod_and_chan_4x_QBew #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(QAM16_LUT_M_real_V_address0),
    .ce0(QAM16_LUT_M_real_V_ce0),
    .q0(QAM16_LUT_M_real_V_q0),
    .address1(QAM16_LUT_M_real_V_address1),
    .ce1(QAM16_LUT_M_real_V_ce1),
    .q1(QAM16_LUT_M_real_V_q1),
    .address2(QAM16_LUT_M_real_V_address2),
    .ce2(QAM16_LUT_M_real_V_ce2),
    .q2(QAM16_LUT_M_real_V_q2),
    .address3(QAM16_LUT_M_real_V_address3),
    .ce3(QAM16_LUT_M_real_V_ce3),
    .q3(QAM16_LUT_M_real_V_q3)
);

mod_and_chan_4x_QCeG #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(QAM16_LUT_M_imag_V_address0),
    .ce0(QAM16_LUT_M_imag_V_ce0),
    .q0(QAM16_LUT_M_imag_V_q0),
    .address1(QAM16_LUT_M_imag_V_address1),
    .ce1(QAM16_LUT_M_imag_V_ce1),
    .q1(QAM16_LUT_M_imag_V_q1),
    .address2(QAM16_LUT_M_imag_V_address2),
    .ce2(QAM16_LUT_M_imag_V_ce2),
    .q2(QAM16_LUT_M_imag_V_q2),
    .address3(QAM16_LUT_M_imag_V_address3),
    .ce3(QAM16_LUT_M_imag_V_ce3),
    .q3(QAM16_LUT_M_imag_V_q3)
);

mod_and_chan_4x_QDeQ #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(QAM64_LUT_M_real_V_address0),
    .ce0(QAM64_LUT_M_real_V_ce0),
    .q0(QAM64_LUT_M_real_V_q0),
    .address1(QAM64_LUT_M_real_V_address1),
    .ce1(QAM64_LUT_M_real_V_ce1),
    .q1(QAM64_LUT_M_real_V_q1),
    .address2(QAM64_LUT_M_real_V_address2),
    .ce2(QAM64_LUT_M_real_V_ce2),
    .q2(QAM64_LUT_M_real_V_q2),
    .address3(QAM64_LUT_M_real_V_address3),
    .ce3(QAM64_LUT_M_real_V_ce3),
    .q3(QAM64_LUT_M_real_V_q3)
);

mod_and_chan_4x_QEe0 #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(QAM64_LUT_M_imag_V_address0),
    .ce0(QAM64_LUT_M_imag_V_ce0),
    .q0(QAM64_LUT_M_imag_V_q0),
    .address1(QAM64_LUT_M_imag_V_address1),
    .ce1(QAM64_LUT_M_imag_V_ce1),
    .q1(QAM64_LUT_M_imag_V_q1),
    .address2(QAM64_LUT_M_imag_V_address2),
    .ce2(QAM64_LUT_M_imag_V_ce2),
    .q2(QAM64_LUT_M_imag_V_q2),
    .address3(QAM64_LUT_M_imag_V_address3),
    .ce3(QAM64_LUT_M_imag_V_ce3),
    .q3(QAM64_LUT_M_imag_V_q3)
);

awgn_real1 grp_awgn_real1_fu_502(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real1_fu_502_ap_start),
    .ap_done(grp_awgn_real1_fu_502_ap_done),
    .ap_idle(grp_awgn_real1_fu_502_ap_idle),
    .ap_ready(grp_awgn_real1_fu_502_ap_ready),
    .ap_ce(grp_awgn_real1_fu_502_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_real1_fu_502_ap_return)
);

awgn_imag1 grp_awgn_imag1_fu_515(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag1_fu_515_ap_start),
    .ap_done(grp_awgn_imag1_fu_515_ap_done),
    .ap_idle(grp_awgn_imag1_fu_515_ap_idle),
    .ap_ready(grp_awgn_imag1_fu_515_ap_ready),
    .ap_ce(grp_awgn_imag1_fu_515_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_imag1_fu_515_ap_return)
);

awgn_real2 grp_awgn_real2_fu_528(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real2_fu_528_ap_start),
    .ap_done(grp_awgn_real2_fu_528_ap_done),
    .ap_idle(grp_awgn_real2_fu_528_ap_idle),
    .ap_ready(grp_awgn_real2_fu_528_ap_ready),
    .ap_ce(grp_awgn_real2_fu_528_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_real2_fu_528_ap_return)
);

awgn_imag2 grp_awgn_imag2_fu_541(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag2_fu_541_ap_start),
    .ap_done(grp_awgn_imag2_fu_541_ap_done),
    .ap_idle(grp_awgn_imag2_fu_541_ap_idle),
    .ap_ready(grp_awgn_imag2_fu_541_ap_ready),
    .ap_ce(grp_awgn_imag2_fu_541_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_imag2_fu_541_ap_return)
);

awgn_real3 grp_awgn_real3_fu_554(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real3_fu_554_ap_start),
    .ap_done(grp_awgn_real3_fu_554_ap_done),
    .ap_idle(grp_awgn_real3_fu_554_ap_idle),
    .ap_ready(grp_awgn_real3_fu_554_ap_ready),
    .ap_ce(grp_awgn_real3_fu_554_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_real3_fu_554_ap_return)
);

awgn_imag3 grp_awgn_imag3_fu_567(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag3_fu_567_ap_start),
    .ap_done(grp_awgn_imag3_fu_567_ap_done),
    .ap_idle(grp_awgn_imag3_fu_567_ap_idle),
    .ap_ready(grp_awgn_imag3_fu_567_ap_ready),
    .ap_ce(grp_awgn_imag3_fu_567_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_imag3_fu_567_ap_return)
);

awgn_real4 grp_awgn_real4_fu_580(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real4_fu_580_ap_start),
    .ap_done(grp_awgn_real4_fu_580_ap_done),
    .ap_idle(grp_awgn_real4_fu_580_ap_idle),
    .ap_ready(grp_awgn_real4_fu_580_ap_ready),
    .ap_ce(grp_awgn_real4_fu_580_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_real4_fu_580_ap_return)
);

awgn_imag4 grp_awgn_imag4_fu_593(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag4_fu_593_ap_start),
    .ap_done(grp_awgn_imag4_fu_593_ap_done),
    .ap_idle(grp_awgn_imag4_fu_593_ap_idle),
    .ap_ready(grp_awgn_imag4_fu_593_ap_ready),
    .ap_ce(grp_awgn_imag4_fu_593_ap_ce),
    .snr_V(awgn_snr_V_reg_2119),
    .ap_return(grp_awgn_imag4_fu_593_ap_return)
);

mod_and_chan_4x_mFfa #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 6 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mod_and_chan_4x_mFfa_U54(
    .din0(6'd4),
    .din1(6'd8),
    .din2(6'd12),
    .din3(6'd24),
    .din4(6'd0),
    .din5(6'd0),
    .din6(6'd0),
    .din7(6'd0),
    .din8(ctrl_mod_type_V_reg_2023),
    .dout(p_2_fu_813_p10)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U55(
    .din0(16'd11585),
    .din1(16'd53950),
    .din2(16'd11585),
    .din3(16'd53950),
    .din4(tmp_17_reg_2302),
    .dout(channel_data_M_real_1_fu_1334_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U56(
    .din0(16'd11585),
    .din1(16'd11585),
    .din2(16'd53950),
    .din3(16'd53950),
    .din4(tmp_17_reg_2302),
    .dout(channel_data_M_imag_fu_1347_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U57(
    .din0(16'd11585),
    .din1(16'd53950),
    .din2(16'd11585),
    .din3(16'd53950),
    .din4(tmp_20_reg_2254_pp0_iter14_reg),
    .dout(channel_data_M_real_7_fu_1417_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U58(
    .din0(16'd11585),
    .din1(16'd11585),
    .din2(16'd53950),
    .din3(16'd53950),
    .din4(tmp_20_reg_2254_pp0_iter14_reg),
    .dout(channel_data_M_imag_5_fu_1430_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U59(
    .din0(16'd11585),
    .din1(16'd53950),
    .din2(16'd11585),
    .din3(16'd53950),
    .din4(tmp_23_reg_2270_pp0_iter14_reg),
    .dout(channel_data_M_real_12_fu_1500_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U60(
    .din0(16'd11585),
    .din1(16'd11585),
    .din2(16'd53950),
    .din3(16'd53950),
    .din4(tmp_23_reg_2270_pp0_iter14_reg),
    .dout(channel_data_M_imag_9_fu_1513_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U61(
    .din0(16'd11585),
    .din1(16'd53950),
    .din2(16'd11585),
    .din3(16'd53950),
    .din4(tmp_26_reg_2286_pp0_iter14_reg),
    .dout(channel_data_M_real_17_fu_1583_p6)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mGfk_U62(
    .din0(16'd11585),
    .din1(16'd11585),
    .din2(16'd53950),
    .din3(16'd53950),
    .din4(tmp_26_reg_2286_pp0_iter14_reg),
    .dout(channel_data_M_imag_13_fu_1596_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_1_V_1_ack_out == 1'b1) & (chan_data_1_V_1_vld_out == 1'b1))) begin
            chan_data_1_V_1_sel_rd <= ~chan_data_1_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_1_V_1_ack_in == 1'b1) & (chan_data_1_V_1_vld_in == 1'b1))) begin
            chan_data_1_V_1_sel_wr <= ~chan_data_1_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_1_V_1_state == 2'd2) & (chan_data_1_V_1_vld_in == 1'b0)) | ((chan_data_1_V_1_state == 2'd3) & (chan_data_1_V_1_vld_in == 1'b0) & (chan_data_1_V_1_ack_out == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd2;
        end else if ((((chan_data_1_V_1_state == 2'd1) & (chan_data_1_V_1_ack_out == 1'b0)) | ((chan_data_1_V_1_state == 2'd3) & (chan_data_1_V_1_ack_out == 1'b0) & (chan_data_1_V_1_vld_in == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd1;
        end else if (((~((chan_data_1_V_1_vld_in == 1'b0) & (chan_data_1_V_1_ack_out == 1'b1)) & ~((chan_data_1_V_1_ack_out == 1'b0) & (chan_data_1_V_1_vld_in == 1'b1)) & (chan_data_1_V_1_state == 2'd3)) | ((chan_data_1_V_1_state == 2'd1) & (chan_data_1_V_1_ack_out == 1'b1)) | ((chan_data_1_V_1_state == 2'd2) & (chan_data_1_V_1_vld_in == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd3;
        end else begin
            chan_data_1_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_2_V_1_ack_out == 1'b1) & (chan_data_2_V_1_vld_out == 1'b1))) begin
            chan_data_2_V_1_sel_rd <= ~chan_data_2_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_2_V_1_ack_in == 1'b1) & (chan_data_2_V_1_vld_in == 1'b1))) begin
            chan_data_2_V_1_sel_wr <= ~chan_data_2_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_2_V_1_state == 2'd2) & (chan_data_2_V_1_vld_in == 1'b0)) | ((chan_data_2_V_1_state == 2'd3) & (chan_data_2_V_1_vld_in == 1'b0) & (chan_data_2_V_1_ack_out == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd2;
        end else if ((((chan_data_2_V_1_state == 2'd1) & (chan_data_2_V_1_ack_out == 1'b0)) | ((chan_data_2_V_1_state == 2'd3) & (chan_data_2_V_1_ack_out == 1'b0) & (chan_data_2_V_1_vld_in == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd1;
        end else if (((~((chan_data_2_V_1_vld_in == 1'b0) & (chan_data_2_V_1_ack_out == 1'b1)) & ~((chan_data_2_V_1_ack_out == 1'b0) & (chan_data_2_V_1_vld_in == 1'b1)) & (chan_data_2_V_1_state == 2'd3)) | ((chan_data_2_V_1_state == 2'd1) & (chan_data_2_V_1_ack_out == 1'b1)) | ((chan_data_2_V_1_state == 2'd2) & (chan_data_2_V_1_vld_in == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd3;
        end else begin
            chan_data_2_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_3_V_1_ack_out == 1'b1) & (chan_data_3_V_1_vld_out == 1'b1))) begin
            chan_data_3_V_1_sel_rd <= ~chan_data_3_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_3_V_1_ack_in == 1'b1) & (chan_data_3_V_1_vld_in == 1'b1))) begin
            chan_data_3_V_1_sel_wr <= ~chan_data_3_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_3_V_1_state == 2'd2) & (chan_data_3_V_1_vld_in == 1'b0)) | ((chan_data_3_V_1_state == 2'd3) & (chan_data_3_V_1_vld_in == 1'b0) & (chan_data_3_V_1_ack_out == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd2;
        end else if ((((chan_data_3_V_1_state == 2'd1) & (chan_data_3_V_1_ack_out == 1'b0)) | ((chan_data_3_V_1_state == 2'd3) & (chan_data_3_V_1_ack_out == 1'b0) & (chan_data_3_V_1_vld_in == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd1;
        end else if (((~((chan_data_3_V_1_vld_in == 1'b0) & (chan_data_3_V_1_ack_out == 1'b1)) & ~((chan_data_3_V_1_ack_out == 1'b0) & (chan_data_3_V_1_vld_in == 1'b1)) & (chan_data_3_V_1_state == 2'd3)) | ((chan_data_3_V_1_state == 2'd1) & (chan_data_3_V_1_ack_out == 1'b1)) | ((chan_data_3_V_1_state == 2'd2) & (chan_data_3_V_1_vld_in == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd3;
        end else begin
            chan_data_3_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_4_V_1_ack_out == 1'b1) & (chan_data_4_V_1_vld_out == 1'b1))) begin
            chan_data_4_V_1_sel_rd <= ~chan_data_4_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_4_V_1_ack_in == 1'b1) & (chan_data_4_V_1_vld_in == 1'b1))) begin
            chan_data_4_V_1_sel_wr <= ~chan_data_4_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_4_V_1_state == 2'd2) & (chan_data_4_V_1_vld_in == 1'b0)) | ((chan_data_4_V_1_state == 2'd3) & (chan_data_4_V_1_vld_in == 1'b0) & (chan_data_4_V_1_ack_out == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd2;
        end else if ((((chan_data_4_V_1_state == 2'd1) & (chan_data_4_V_1_ack_out == 1'b0)) | ((chan_data_4_V_1_state == 2'd3) & (chan_data_4_V_1_ack_out == 1'b0) & (chan_data_4_V_1_vld_in == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd1;
        end else if (((~((chan_data_4_V_1_vld_in == 1'b0) & (chan_data_4_V_1_ack_out == 1'b1)) & ~((chan_data_4_V_1_ack_out == 1'b0) & (chan_data_4_V_1_vld_in == 1'b1)) & (chan_data_4_V_1_state == 2'd3)) | ((chan_data_4_V_1_state == 2'd1) & (chan_data_4_V_1_ack_out == 1'b1)) | ((chan_data_4_V_1_state == 2'd2) & (chan_data_4_V_1_vld_in == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd3;
        end else begin
            chan_data_4_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((ctrl_in_V_0_ack_out == 1'b1) & (ctrl_in_V_0_vld_out == 1'b1))) begin
            ctrl_in_V_0_sel_rd <= ~ctrl_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((ctrl_in_V_0_ack_in == 1'b1) & (ctrl_in_V_0_vld_in == 1'b1))) begin
            ctrl_in_V_0_sel_wr <= ~ctrl_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_state <= 2'd0;
    end else begin
        if ((((ctrl_in_V_0_state == 2'd2) & (ctrl_in_V_0_vld_in == 1'b0)) | ((ctrl_in_V_0_state == 2'd3) & (ctrl_in_V_0_vld_in == 1'b0) & (ctrl_in_V_0_ack_out == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd2;
        end else if ((((ctrl_in_V_0_state == 2'd1) & (ctrl_in_V_0_ack_out == 1'b0)) | ((ctrl_in_V_0_state == 2'd3) & (ctrl_in_V_0_ack_out == 1'b0) & (ctrl_in_V_0_vld_in == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd1;
        end else if (((~((ctrl_in_V_0_vld_in == 1'b0) & (ctrl_in_V_0_ack_out == 1'b1)) & ~((ctrl_in_V_0_ack_out == 1'b0) & (ctrl_in_V_0_vld_in == 1'b1)) & (ctrl_in_V_0_state == 2'd3)) | ((ctrl_in_V_0_state == 2'd1) & (ctrl_in_V_0_ack_out == 1'b1)) | ((ctrl_in_V_0_state == 2'd2) & (ctrl_in_V_0_vld_in == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd3;
        end else begin
            ctrl_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ctrl_out_V_1_ack_out == 1'b1) & (ctrl_out_V_1_vld_out == 1'b1))) begin
            ctrl_out_V_1_sel_rd <= ~ctrl_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((ctrl_out_V_1_ack_in == 1'b1) & (ctrl_out_V_1_vld_in == 1'b1))) begin
            ctrl_out_V_1_sel_wr <= ~ctrl_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_state <= 2'd0;
    end else begin
        if ((((ctrl_out_V_1_state == 2'd2) & (ctrl_out_V_1_vld_in == 1'b0)) | ((ctrl_out_V_1_state == 2'd3) & (ctrl_out_V_1_vld_in == 1'b0) & (ctrl_out_V_1_ack_out == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd2;
        end else if ((((ctrl_out_V_1_state == 2'd1) & (ctrl_out_V_1_ack_out == 1'b0)) | ((ctrl_out_V_1_state == 2'd3) & (ctrl_out_V_1_ack_out == 1'b0) & (ctrl_out_V_1_vld_in == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd1;
        end else if (((~((ctrl_out_V_1_vld_in == 1'b0) & (ctrl_out_V_1_ack_out == 1'b1)) & ~((ctrl_out_V_1_ack_out == 1'b0) & (ctrl_out_V_1_vld_in == 1'b1)) & (ctrl_out_V_1_state == 2'd3)) | ((ctrl_out_V_1_state == 2'd1) & (ctrl_out_V_1_ack_out == 1'b1)) | ((ctrl_out_V_1_state == 2'd2) & (ctrl_out_V_1_vld_in == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd3;
        end else begin
            ctrl_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag1_fu_515_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag1_fu_515_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag1_fu_515_ap_ready == 1'b1)) begin
            grp_awgn_imag1_fu_515_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag2_fu_541_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag2_fu_541_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag2_fu_541_ap_ready == 1'b1)) begin
            grp_awgn_imag2_fu_541_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag3_fu_567_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag3_fu_567_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag3_fu_567_ap_ready == 1'b1)) begin
            grp_awgn_imag3_fu_567_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag4_fu_593_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag4_fu_593_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag4_fu_593_ap_ready == 1'b1)) begin
            grp_awgn_imag4_fu_593_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real1_fu_502_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real1_fu_502_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real1_fu_502_ap_ready == 1'b1)) begin
            grp_awgn_real1_fu_502_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real2_fu_528_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real2_fu_528_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real2_fu_528_ap_ready == 1'b1)) begin
            grp_awgn_real2_fu_528_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real3_fu_554_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real3_fu_554_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real3_fu_554_ap_ready == 1'b1)) begin
            grp_awgn_real3_fu_554_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real4_fu_580_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real4_fu_580_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real4_fu_580_ap_ready == 1'b1)) begin
            grp_awgn_real4_fu_580_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_V_V_0_ack_out == 1'b1) & (hard_data_V_V_0_vld_out == 1'b1))) begin
            hard_data_V_V_0_sel_rd <= ~hard_data_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_V_V_0_ack_in == 1'b1) & (hard_data_V_V_0_vld_in == 1'b1))) begin
            hard_data_V_V_0_sel_wr <= ~hard_data_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_state <= 2'd0;
    end else begin
        if ((((hard_data_V_V_0_state == 2'd2) & (hard_data_V_V_0_vld_in == 1'b0)) | ((hard_data_V_V_0_state == 2'd3) & (hard_data_V_V_0_vld_in == 1'b0) & (hard_data_V_V_0_ack_out == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd2;
        end else if ((((hard_data_V_V_0_state == 2'd1) & (hard_data_V_V_0_ack_out == 1'b0)) | ((hard_data_V_V_0_state == 2'd3) & (hard_data_V_V_0_ack_out == 1'b0) & (hard_data_V_V_0_vld_in == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd1;
        end else if (((~((hard_data_V_V_0_vld_in == 1'b0) & (hard_data_V_V_0_ack_out == 1'b1)) & ~((hard_data_V_V_0_ack_out == 1'b0) & (hard_data_V_V_0_vld_in == 1'b1)) & (hard_data_V_V_0_state == 2'd3)) | ((hard_data_V_V_0_state == 2'd1) & (hard_data_V_V_0_ack_out == 1'b1)) | ((hard_data_V_V_0_state == 2'd2) & (hard_data_V_V_0_vld_in == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd3;
        end else begin
            hard_data_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1129)) begin
        if (((tmp_10_reg_2207 == 1'd1) & (tmp_9_reg_2203 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_Val2_5_reg_492 <= hard_data_V_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_5_reg_492 <= ap_phi_reg_pp0_iter1_p_Val2_5_reg_492;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_fu_977_p2 == 1'd1) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        remaining_bits_fu_240 <= remaining_bits_1_fu_992_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_fu_977_p2 == 1'd0) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        remaining_bits_fu_240 <= remaining_bits_2_fu_982_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        remaining_bits_fu_240 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symbols_reg_483 <= symbols_V_1_fu_1002_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        symbols_reg_483 <= ctrl_block_symbls_V_reg_2049;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_Val2_5_reg_492 <= ap_phi_reg_pp0_iter0_p_Val2_5_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        awgn_snr_V_reg_2119 <= awgn_snr_V_fu_918_p3;
        sel_tmp5_reg_2155 <= sel_tmp5_fu_953_p2;
        sel_tmp7_reg_2171 <= sel_tmp7_fu_958_p2;
        sel_tmp9_reg_2187 <= sel_tmp9_fu_963_p2;
        sel_tmp_reg_2147 <= sel_tmp_fu_948_p2;
        sh_assign_cast_reg_2107[1 : 0] <= sh_assign_cast_fu_834_p1[1 : 0];
        tmp_13_cast_reg_2131[5 : 0] <= tmp_13_cast_fu_926_p1[5 : 0];
        tmp_20_cast_reg_2142[6 : 0] <= tmp_20_cast_fu_944_p1[6 : 0];
        tmp_5_reg_2137[5 : 0] <= tmp_5_fu_934_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        carry_reg_2095 <= carry_fu_797_p2;
        p_Result_4_reg_2101 <= {{snr_mod_V_fu_734_p2[16:15]}};
        p_Val2_4_reg_2089 <= p_Val2_4_fu_777_p2;
        sh_assign_reg_2077 <= sh_assign_fu_727_p3;
        signbit_reg_2082 <= snr_mod_V_fu_734_p2[32'd16];
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_1_V_1_load_A == 1'b1)) begin
        chan_data_1_V_1_payload_A <= cast1_fu_1947_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_1_V_1_load_B == 1'b1)) begin
        chan_data_1_V_1_payload_B <= cast1_fu_1947_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_2_V_1_load_A == 1'b1)) begin
        chan_data_2_V_1_payload_A <= cast2_fu_1960_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_2_V_1_load_B == 1'b1)) begin
        chan_data_2_V_1_payload_B <= cast2_fu_1960_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_3_V_1_load_A == 1'b1)) begin
        chan_data_3_V_1_payload_A <= cast3_fu_1973_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_3_V_1_load_B == 1'b1)) begin
        chan_data_3_V_1_payload_B <= cast3_fu_1973_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_4_V_1_load_A == 1'b1)) begin
        chan_data_4_V_1_payload_A <= cast4_fu_1986_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_4_V_1_load_B == 1'b1)) begin
        chan_data_4_V_1_payload_B <= cast4_fu_1986_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_block_symbls_V_reg_2049 <= {{ctrl_in_V_0_data_out[52:39]}};
        ctrl_mod_type_V_reg_2023 <= {{ctrl_in_V_0_data_out[3:1]}};
        ctrl_skip_chan_V_reg_2032 <= ctrl_in_V_0_data_out[32'd4];
        ctrl_snr_V_reg_2044 <= {{ctrl_in_V_0_data_out[21:5]}};
        or_cond_reg_2071 <= or_cond_fu_690_p2;
        sel_tmp2_reg_2065 <= sel_tmp2_fu_684_p2;
        tmp_8_reg_2059 <= tmp_8_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_in_V_0_load_A == 1'b1)) begin
        ctrl_in_V_0_payload_A <= ctrl_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_in_V_0_load_B == 1'b1)) begin
        ctrl_in_V_0_payload_B <= ctrl_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_out_V_1_load_A == 1'b1)) begin
        ctrl_out_V_1_payload_A <= tmp_1_cast_fu_653_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_out_V_1_load_B == 1'b1)) begin
        ctrl_out_V_1_payload_B <= tmp_1_cast_fu_653_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_V_0_load_A == 1'b1)) begin
        hard_data_V_V_0_payload_A <= hard_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_V_0_load_B == 1'b1)) begin
        hard_data_V_V_0_payload_B <= hard_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_3_reg_471 <= r_V_reg_2244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Result_1_fu_228 <= symbol_3_V_10_fu_1150_p3;
        p_Result_2_fu_232 <= symbol_2_V_8_fu_1122_p3;
        p_Result_s_fu_224 <= p_Val2_38_fu_1178_p3;
        r_V_reg_2244 <= r_V_fu_1185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        p_Result_3_fu_236 <= symbol_1_V_5_fu_1262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter14_reg == 1'd0))) begin
        p_Val2_21_reg_2393 <= p_Val2_21_fu_1403_p3;
        p_Val2_22_reg_2398 <= p_Val2_22_fu_1465_p3;
        p_Val2_23_reg_2403 <= p_Val2_23_fu_1486_p3;
        p_Val2_24_reg_2408 <= p_Val2_24_fu_1548_p3;
        p_Val2_25_reg_2413 <= p_Val2_25_fu_1569_p3;
        p_Val2_26_reg_2418 <= p_Val2_26_fu_1631_p3;
        p_Val2_27_reg_2423 <= p_Val2_27_fu_1652_p3;
        p_Val2_37_reg_2388 <= p_Val2_37_fu_1382_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter1_reg == 1'd0))) begin
        p_Val2_38_reg_2239 <= p_Val2_38_fu_1178_p3;
        symbol_1_V_reg_2221 <= symbol_1_V_fu_1017_p1;
        symbol_2_V_8_reg_2229 <= symbol_2_V_8_fu_1122_p3;
        symbol_3_V_10_reg_2234 <= symbol_3_V_10_fu_1150_p3;
        tmp_19_reg_2249 <= tmp_19_fu_1190_p1;
        tmp_20_reg_2254 <= tmp_20_fu_1194_p1;
        tmp_21_reg_2260 <= tmp_21_fu_1198_p1;
        tmp_22_reg_2265 <= tmp_22_fu_1202_p1;
        tmp_23_reg_2270 <= tmp_23_fu_1206_p1;
        tmp_24_reg_2276 <= tmp_24_fu_1210_p1;
        tmp_25_reg_2281 <= tmp_25_fu_1214_p1;
        tmp_26_reg_2286 <= tmp_26_fu_1218_p1;
        tmp_27_reg_2292 <= tmp_27_fu_1222_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_Val2_38_reg_2239_pp0_iter10_reg <= p_Val2_38_reg_2239_pp0_iter9_reg;
        p_Val2_38_reg_2239_pp0_iter11_reg <= p_Val2_38_reg_2239_pp0_iter10_reg;
        p_Val2_38_reg_2239_pp0_iter12_reg <= p_Val2_38_reg_2239_pp0_iter11_reg;
        p_Val2_38_reg_2239_pp0_iter13_reg <= p_Val2_38_reg_2239_pp0_iter12_reg;
        p_Val2_38_reg_2239_pp0_iter3_reg <= p_Val2_38_reg_2239;
        p_Val2_38_reg_2239_pp0_iter4_reg <= p_Val2_38_reg_2239_pp0_iter3_reg;
        p_Val2_38_reg_2239_pp0_iter5_reg <= p_Val2_38_reg_2239_pp0_iter4_reg;
        p_Val2_38_reg_2239_pp0_iter6_reg <= p_Val2_38_reg_2239_pp0_iter5_reg;
        p_Val2_38_reg_2239_pp0_iter7_reg <= p_Val2_38_reg_2239_pp0_iter6_reg;
        p_Val2_38_reg_2239_pp0_iter8_reg <= p_Val2_38_reg_2239_pp0_iter7_reg;
        p_Val2_38_reg_2239_pp0_iter9_reg <= p_Val2_38_reg_2239_pp0_iter8_reg;
        symbol_1_V_reg_2221_pp0_iter10_reg <= symbol_1_V_reg_2221_pp0_iter9_reg;
        symbol_1_V_reg_2221_pp0_iter11_reg <= symbol_1_V_reg_2221_pp0_iter10_reg;
        symbol_1_V_reg_2221_pp0_iter12_reg <= symbol_1_V_reg_2221_pp0_iter11_reg;
        symbol_1_V_reg_2221_pp0_iter13_reg <= symbol_1_V_reg_2221_pp0_iter12_reg;
        symbol_1_V_reg_2221_pp0_iter3_reg <= symbol_1_V_reg_2221;
        symbol_1_V_reg_2221_pp0_iter4_reg <= symbol_1_V_reg_2221_pp0_iter3_reg;
        symbol_1_V_reg_2221_pp0_iter5_reg <= symbol_1_V_reg_2221_pp0_iter4_reg;
        symbol_1_V_reg_2221_pp0_iter6_reg <= symbol_1_V_reg_2221_pp0_iter5_reg;
        symbol_1_V_reg_2221_pp0_iter7_reg <= symbol_1_V_reg_2221_pp0_iter6_reg;
        symbol_1_V_reg_2221_pp0_iter8_reg <= symbol_1_V_reg_2221_pp0_iter7_reg;
        symbol_1_V_reg_2221_pp0_iter9_reg <= symbol_1_V_reg_2221_pp0_iter8_reg;
        symbol_2_V_8_reg_2229_pp0_iter10_reg <= symbol_2_V_8_reg_2229_pp0_iter9_reg;
        symbol_2_V_8_reg_2229_pp0_iter11_reg <= symbol_2_V_8_reg_2229_pp0_iter10_reg;
        symbol_2_V_8_reg_2229_pp0_iter12_reg <= symbol_2_V_8_reg_2229_pp0_iter11_reg;
        symbol_2_V_8_reg_2229_pp0_iter13_reg <= symbol_2_V_8_reg_2229_pp0_iter12_reg;
        symbol_2_V_8_reg_2229_pp0_iter3_reg <= symbol_2_V_8_reg_2229;
        symbol_2_V_8_reg_2229_pp0_iter4_reg <= symbol_2_V_8_reg_2229_pp0_iter3_reg;
        symbol_2_V_8_reg_2229_pp0_iter5_reg <= symbol_2_V_8_reg_2229_pp0_iter4_reg;
        symbol_2_V_8_reg_2229_pp0_iter6_reg <= symbol_2_V_8_reg_2229_pp0_iter5_reg;
        symbol_2_V_8_reg_2229_pp0_iter7_reg <= symbol_2_V_8_reg_2229_pp0_iter6_reg;
        symbol_2_V_8_reg_2229_pp0_iter8_reg <= symbol_2_V_8_reg_2229_pp0_iter7_reg;
        symbol_2_V_8_reg_2229_pp0_iter9_reg <= symbol_2_V_8_reg_2229_pp0_iter8_reg;
        symbol_3_V_10_reg_2234_pp0_iter10_reg <= symbol_3_V_10_reg_2234_pp0_iter9_reg;
        symbol_3_V_10_reg_2234_pp0_iter11_reg <= symbol_3_V_10_reg_2234_pp0_iter10_reg;
        symbol_3_V_10_reg_2234_pp0_iter12_reg <= symbol_3_V_10_reg_2234_pp0_iter11_reg;
        symbol_3_V_10_reg_2234_pp0_iter13_reg <= symbol_3_V_10_reg_2234_pp0_iter12_reg;
        symbol_3_V_10_reg_2234_pp0_iter3_reg <= symbol_3_V_10_reg_2234;
        symbol_3_V_10_reg_2234_pp0_iter4_reg <= symbol_3_V_10_reg_2234_pp0_iter3_reg;
        symbol_3_V_10_reg_2234_pp0_iter5_reg <= symbol_3_V_10_reg_2234_pp0_iter4_reg;
        symbol_3_V_10_reg_2234_pp0_iter6_reg <= symbol_3_V_10_reg_2234_pp0_iter5_reg;
        symbol_3_V_10_reg_2234_pp0_iter7_reg <= symbol_3_V_10_reg_2234_pp0_iter6_reg;
        symbol_3_V_10_reg_2234_pp0_iter8_reg <= symbol_3_V_10_reg_2234_pp0_iter7_reg;
        symbol_3_V_10_reg_2234_pp0_iter9_reg <= symbol_3_V_10_reg_2234_pp0_iter8_reg;
        tmp_19_reg_2249_pp0_iter10_reg <= tmp_19_reg_2249_pp0_iter9_reg;
        tmp_19_reg_2249_pp0_iter11_reg <= tmp_19_reg_2249_pp0_iter10_reg;
        tmp_19_reg_2249_pp0_iter12_reg <= tmp_19_reg_2249_pp0_iter11_reg;
        tmp_19_reg_2249_pp0_iter13_reg <= tmp_19_reg_2249_pp0_iter12_reg;
        tmp_19_reg_2249_pp0_iter14_reg <= tmp_19_reg_2249_pp0_iter13_reg;
        tmp_19_reg_2249_pp0_iter3_reg <= tmp_19_reg_2249;
        tmp_19_reg_2249_pp0_iter4_reg <= tmp_19_reg_2249_pp0_iter3_reg;
        tmp_19_reg_2249_pp0_iter5_reg <= tmp_19_reg_2249_pp0_iter4_reg;
        tmp_19_reg_2249_pp0_iter6_reg <= tmp_19_reg_2249_pp0_iter5_reg;
        tmp_19_reg_2249_pp0_iter7_reg <= tmp_19_reg_2249_pp0_iter6_reg;
        tmp_19_reg_2249_pp0_iter8_reg <= tmp_19_reg_2249_pp0_iter7_reg;
        tmp_19_reg_2249_pp0_iter9_reg <= tmp_19_reg_2249_pp0_iter8_reg;
        tmp_20_reg_2254_pp0_iter10_reg <= tmp_20_reg_2254_pp0_iter9_reg;
        tmp_20_reg_2254_pp0_iter11_reg <= tmp_20_reg_2254_pp0_iter10_reg;
        tmp_20_reg_2254_pp0_iter12_reg <= tmp_20_reg_2254_pp0_iter11_reg;
        tmp_20_reg_2254_pp0_iter13_reg <= tmp_20_reg_2254_pp0_iter12_reg;
        tmp_20_reg_2254_pp0_iter14_reg <= tmp_20_reg_2254_pp0_iter13_reg;
        tmp_20_reg_2254_pp0_iter3_reg <= tmp_20_reg_2254;
        tmp_20_reg_2254_pp0_iter4_reg <= tmp_20_reg_2254_pp0_iter3_reg;
        tmp_20_reg_2254_pp0_iter5_reg <= tmp_20_reg_2254_pp0_iter4_reg;
        tmp_20_reg_2254_pp0_iter6_reg <= tmp_20_reg_2254_pp0_iter5_reg;
        tmp_20_reg_2254_pp0_iter7_reg <= tmp_20_reg_2254_pp0_iter6_reg;
        tmp_20_reg_2254_pp0_iter8_reg <= tmp_20_reg_2254_pp0_iter7_reg;
        tmp_20_reg_2254_pp0_iter9_reg <= tmp_20_reg_2254_pp0_iter8_reg;
        tmp_21_reg_2260_pp0_iter10_reg <= tmp_21_reg_2260_pp0_iter9_reg;
        tmp_21_reg_2260_pp0_iter11_reg <= tmp_21_reg_2260_pp0_iter10_reg;
        tmp_21_reg_2260_pp0_iter12_reg <= tmp_21_reg_2260_pp0_iter11_reg;
        tmp_21_reg_2260_pp0_iter13_reg <= tmp_21_reg_2260_pp0_iter12_reg;
        tmp_21_reg_2260_pp0_iter3_reg <= tmp_21_reg_2260;
        tmp_21_reg_2260_pp0_iter4_reg <= tmp_21_reg_2260_pp0_iter3_reg;
        tmp_21_reg_2260_pp0_iter5_reg <= tmp_21_reg_2260_pp0_iter4_reg;
        tmp_21_reg_2260_pp0_iter6_reg <= tmp_21_reg_2260_pp0_iter5_reg;
        tmp_21_reg_2260_pp0_iter7_reg <= tmp_21_reg_2260_pp0_iter6_reg;
        tmp_21_reg_2260_pp0_iter8_reg <= tmp_21_reg_2260_pp0_iter7_reg;
        tmp_21_reg_2260_pp0_iter9_reg <= tmp_21_reg_2260_pp0_iter8_reg;
        tmp_22_reg_2265_pp0_iter10_reg <= tmp_22_reg_2265_pp0_iter9_reg;
        tmp_22_reg_2265_pp0_iter11_reg <= tmp_22_reg_2265_pp0_iter10_reg;
        tmp_22_reg_2265_pp0_iter12_reg <= tmp_22_reg_2265_pp0_iter11_reg;
        tmp_22_reg_2265_pp0_iter13_reg <= tmp_22_reg_2265_pp0_iter12_reg;
        tmp_22_reg_2265_pp0_iter14_reg <= tmp_22_reg_2265_pp0_iter13_reg;
        tmp_22_reg_2265_pp0_iter3_reg <= tmp_22_reg_2265;
        tmp_22_reg_2265_pp0_iter4_reg <= tmp_22_reg_2265_pp0_iter3_reg;
        tmp_22_reg_2265_pp0_iter5_reg <= tmp_22_reg_2265_pp0_iter4_reg;
        tmp_22_reg_2265_pp0_iter6_reg <= tmp_22_reg_2265_pp0_iter5_reg;
        tmp_22_reg_2265_pp0_iter7_reg <= tmp_22_reg_2265_pp0_iter6_reg;
        tmp_22_reg_2265_pp0_iter8_reg <= tmp_22_reg_2265_pp0_iter7_reg;
        tmp_22_reg_2265_pp0_iter9_reg <= tmp_22_reg_2265_pp0_iter8_reg;
        tmp_23_reg_2270_pp0_iter10_reg <= tmp_23_reg_2270_pp0_iter9_reg;
        tmp_23_reg_2270_pp0_iter11_reg <= tmp_23_reg_2270_pp0_iter10_reg;
        tmp_23_reg_2270_pp0_iter12_reg <= tmp_23_reg_2270_pp0_iter11_reg;
        tmp_23_reg_2270_pp0_iter13_reg <= tmp_23_reg_2270_pp0_iter12_reg;
        tmp_23_reg_2270_pp0_iter14_reg <= tmp_23_reg_2270_pp0_iter13_reg;
        tmp_23_reg_2270_pp0_iter3_reg <= tmp_23_reg_2270;
        tmp_23_reg_2270_pp0_iter4_reg <= tmp_23_reg_2270_pp0_iter3_reg;
        tmp_23_reg_2270_pp0_iter5_reg <= tmp_23_reg_2270_pp0_iter4_reg;
        tmp_23_reg_2270_pp0_iter6_reg <= tmp_23_reg_2270_pp0_iter5_reg;
        tmp_23_reg_2270_pp0_iter7_reg <= tmp_23_reg_2270_pp0_iter6_reg;
        tmp_23_reg_2270_pp0_iter8_reg <= tmp_23_reg_2270_pp0_iter7_reg;
        tmp_23_reg_2270_pp0_iter9_reg <= tmp_23_reg_2270_pp0_iter8_reg;
        tmp_24_reg_2276_pp0_iter10_reg <= tmp_24_reg_2276_pp0_iter9_reg;
        tmp_24_reg_2276_pp0_iter11_reg <= tmp_24_reg_2276_pp0_iter10_reg;
        tmp_24_reg_2276_pp0_iter12_reg <= tmp_24_reg_2276_pp0_iter11_reg;
        tmp_24_reg_2276_pp0_iter13_reg <= tmp_24_reg_2276_pp0_iter12_reg;
        tmp_24_reg_2276_pp0_iter3_reg <= tmp_24_reg_2276;
        tmp_24_reg_2276_pp0_iter4_reg <= tmp_24_reg_2276_pp0_iter3_reg;
        tmp_24_reg_2276_pp0_iter5_reg <= tmp_24_reg_2276_pp0_iter4_reg;
        tmp_24_reg_2276_pp0_iter6_reg <= tmp_24_reg_2276_pp0_iter5_reg;
        tmp_24_reg_2276_pp0_iter7_reg <= tmp_24_reg_2276_pp0_iter6_reg;
        tmp_24_reg_2276_pp0_iter8_reg <= tmp_24_reg_2276_pp0_iter7_reg;
        tmp_24_reg_2276_pp0_iter9_reg <= tmp_24_reg_2276_pp0_iter8_reg;
        tmp_25_reg_2281_pp0_iter10_reg <= tmp_25_reg_2281_pp0_iter9_reg;
        tmp_25_reg_2281_pp0_iter11_reg <= tmp_25_reg_2281_pp0_iter10_reg;
        tmp_25_reg_2281_pp0_iter12_reg <= tmp_25_reg_2281_pp0_iter11_reg;
        tmp_25_reg_2281_pp0_iter13_reg <= tmp_25_reg_2281_pp0_iter12_reg;
        tmp_25_reg_2281_pp0_iter14_reg <= tmp_25_reg_2281_pp0_iter13_reg;
        tmp_25_reg_2281_pp0_iter3_reg <= tmp_25_reg_2281;
        tmp_25_reg_2281_pp0_iter4_reg <= tmp_25_reg_2281_pp0_iter3_reg;
        tmp_25_reg_2281_pp0_iter5_reg <= tmp_25_reg_2281_pp0_iter4_reg;
        tmp_25_reg_2281_pp0_iter6_reg <= tmp_25_reg_2281_pp0_iter5_reg;
        tmp_25_reg_2281_pp0_iter7_reg <= tmp_25_reg_2281_pp0_iter6_reg;
        tmp_25_reg_2281_pp0_iter8_reg <= tmp_25_reg_2281_pp0_iter7_reg;
        tmp_25_reg_2281_pp0_iter9_reg <= tmp_25_reg_2281_pp0_iter8_reg;
        tmp_26_reg_2286_pp0_iter10_reg <= tmp_26_reg_2286_pp0_iter9_reg;
        tmp_26_reg_2286_pp0_iter11_reg <= tmp_26_reg_2286_pp0_iter10_reg;
        tmp_26_reg_2286_pp0_iter12_reg <= tmp_26_reg_2286_pp0_iter11_reg;
        tmp_26_reg_2286_pp0_iter13_reg <= tmp_26_reg_2286_pp0_iter12_reg;
        tmp_26_reg_2286_pp0_iter14_reg <= tmp_26_reg_2286_pp0_iter13_reg;
        tmp_26_reg_2286_pp0_iter3_reg <= tmp_26_reg_2286;
        tmp_26_reg_2286_pp0_iter4_reg <= tmp_26_reg_2286_pp0_iter3_reg;
        tmp_26_reg_2286_pp0_iter5_reg <= tmp_26_reg_2286_pp0_iter4_reg;
        tmp_26_reg_2286_pp0_iter6_reg <= tmp_26_reg_2286_pp0_iter5_reg;
        tmp_26_reg_2286_pp0_iter7_reg <= tmp_26_reg_2286_pp0_iter6_reg;
        tmp_26_reg_2286_pp0_iter8_reg <= tmp_26_reg_2286_pp0_iter7_reg;
        tmp_26_reg_2286_pp0_iter9_reg <= tmp_26_reg_2286_pp0_iter8_reg;
        tmp_27_reg_2292_pp0_iter10_reg <= tmp_27_reg_2292_pp0_iter9_reg;
        tmp_27_reg_2292_pp0_iter11_reg <= tmp_27_reg_2292_pp0_iter10_reg;
        tmp_27_reg_2292_pp0_iter12_reg <= tmp_27_reg_2292_pp0_iter11_reg;
        tmp_27_reg_2292_pp0_iter13_reg <= tmp_27_reg_2292_pp0_iter12_reg;
        tmp_27_reg_2292_pp0_iter3_reg <= tmp_27_reg_2292;
        tmp_27_reg_2292_pp0_iter4_reg <= tmp_27_reg_2292_pp0_iter3_reg;
        tmp_27_reg_2292_pp0_iter5_reg <= tmp_27_reg_2292_pp0_iter4_reg;
        tmp_27_reg_2292_pp0_iter6_reg <= tmp_27_reg_2292_pp0_iter5_reg;
        tmp_27_reg_2292_pp0_iter7_reg <= tmp_27_reg_2292_pp0_iter6_reg;
        tmp_27_reg_2292_pp0_iter8_reg <= tmp_27_reg_2292_pp0_iter7_reg;
        tmp_27_reg_2292_pp0_iter9_reg <= tmp_27_reg_2292_pp0_iter8_reg;
        tmp_9_reg_2203_pp0_iter10_reg <= tmp_9_reg_2203_pp0_iter9_reg;
        tmp_9_reg_2203_pp0_iter11_reg <= tmp_9_reg_2203_pp0_iter10_reg;
        tmp_9_reg_2203_pp0_iter12_reg <= tmp_9_reg_2203_pp0_iter11_reg;
        tmp_9_reg_2203_pp0_iter13_reg <= tmp_9_reg_2203_pp0_iter12_reg;
        tmp_9_reg_2203_pp0_iter14_reg <= tmp_9_reg_2203_pp0_iter13_reg;
        tmp_9_reg_2203_pp0_iter15_reg <= tmp_9_reg_2203_pp0_iter14_reg;
        tmp_9_reg_2203_pp0_iter16_reg <= tmp_9_reg_2203_pp0_iter15_reg;
        tmp_9_reg_2203_pp0_iter2_reg <= tmp_9_reg_2203_pp0_iter1_reg;
        tmp_9_reg_2203_pp0_iter3_reg <= tmp_9_reg_2203_pp0_iter2_reg;
        tmp_9_reg_2203_pp0_iter4_reg <= tmp_9_reg_2203_pp0_iter3_reg;
        tmp_9_reg_2203_pp0_iter5_reg <= tmp_9_reg_2203_pp0_iter4_reg;
        tmp_9_reg_2203_pp0_iter6_reg <= tmp_9_reg_2203_pp0_iter5_reg;
        tmp_9_reg_2203_pp0_iter7_reg <= tmp_9_reg_2203_pp0_iter6_reg;
        tmp_9_reg_2203_pp0_iter8_reg <= tmp_9_reg_2203_pp0_iter7_reg;
        tmp_9_reg_2203_pp0_iter9_reg <= tmp_9_reg_2203_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_2207 <= tmp_10_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_2207_pp0_iter1_reg <= tmp_10_reg_2207;
        tmp_9_reg_2203 <= tmp_9_fu_968_p2;
        tmp_9_reg_2203_pp0_iter1_reg <= tmp_9_reg_2203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter13_reg == 1'd0))) begin
        tmp_16_reg_2297 <= tmp_16_fu_1268_p1;
        tmp_17_reg_2302 <= tmp_17_fu_1272_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_imag_V_ce1 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_imag_V_ce2 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_imag_V_ce3 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_real_V_ce1 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_real_V_ce2 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM16_LUT_M_real_V_ce3 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_imag_V_ce1 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_imag_V_ce2 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_imag_V_ce3 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_real_V_ce1 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_real_V_ce2 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        QAM64_LUT_M_real_V_ce3 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_9_fu_968_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_p_3_phi_fu_475_p4 = r_V_reg_2244;
    end else begin
        ap_phi_mux_p_3_phi_fu_475_p4 = p_3_reg_471;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_10_reg_2207_pp0_iter1_reg == 1'd0) & (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_p_Val2_5_phi_fu_495_p4 = ap_phi_mux_p_3_phi_fu_475_p4;
    end else begin
        ap_phi_mux_p_Val2_5_phi_fu_495_p4 = ap_phi_reg_pp0_iter2_p_Val2_5_reg_492;
    end
end

always @ (*) begin
    if ((chan_data_1_V_1_sel == 1'b1)) begin
        chan_data_1_V_1_data_out = chan_data_1_V_1_payload_B;
    end else begin
        chan_data_1_V_1_data_out = chan_data_1_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_1_V_1_vld_in = 1'b1;
    end else begin
        chan_data_1_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_1_V_TDATA_blk_n = chan_data_1_V_1_state[1'd1];
    end else begin
        chan_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_2_V_1_sel == 1'b1)) begin
        chan_data_2_V_1_data_out = chan_data_2_V_1_payload_B;
    end else begin
        chan_data_2_V_1_data_out = chan_data_2_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_2_V_1_vld_in = 1'b1;
    end else begin
        chan_data_2_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_2_V_TDATA_blk_n = chan_data_2_V_1_state[1'd1];
    end else begin
        chan_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_3_V_1_sel == 1'b1)) begin
        chan_data_3_V_1_data_out = chan_data_3_V_1_payload_B;
    end else begin
        chan_data_3_V_1_data_out = chan_data_3_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_3_V_1_vld_in = 1'b1;
    end else begin
        chan_data_3_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_3_V_TDATA_blk_n = chan_data_3_V_1_state[1'd1];
    end else begin
        chan_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_4_V_1_sel == 1'b1)) begin
        chan_data_4_V_1_data_out = chan_data_4_V_1_payload_B;
    end else begin
        chan_data_4_V_1_data_out = chan_data_4_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_4_V_1_vld_in = 1'b1;
    end else begin
        chan_data_4_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_4_V_TDATA_blk_n = chan_data_4_V_1_state[1'd1];
    end else begin
        chan_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_in_V_0_ack_out = 1'b1;
    end else begin
        ctrl_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((ctrl_in_V_0_sel == 1'b1)) begin
        ctrl_in_V_0_data_out = ctrl_in_V_0_payload_B;
    end else begin
        ctrl_in_V_0_data_out = ctrl_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctrl_in_V_TDATA_blk_n = ctrl_in_V_0_state[1'd0];
    end else begin
        ctrl_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ctrl_out_V_1_sel == 1'b1)) begin
        ctrl_out_V_1_data_out = ctrl_out_V_1_payload_B;
    end else begin
        ctrl_out_V_1_data_out = ctrl_out_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_out_V_1_vld_in = 1'b1;
    end else begin
        ctrl_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_out_V_TDATA_blk_n = ctrl_out_V_1_state[1'd1];
    end else begin
        ctrl_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_imag1_fu_515_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag1_fu_515_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_imag2_fu_541_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag2_fu_541_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_imag3_fu_567_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag3_fu_567_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_imag4_fu_593_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag4_fu_593_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_real1_fu_502_ap_ce = 1'b1;
    end else begin
        grp_awgn_real1_fu_502_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_real2_fu_528_ap_ce = 1'b1;
    end else begin
        grp_awgn_real2_fu_528_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_real3_fu_554_ap_ce = 1'b1;
    end else begin
        grp_awgn_real3_fu_554_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_9_reg_2203_pp0_iter14_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter13_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter12_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter11_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter10_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter9_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter8_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter7_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter6_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter5_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter4_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter3_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter2_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter1_reg == 1'd0) | (tmp_9_reg_2203_pp0_iter15_reg == 1'd0) | (tmp_9_reg_2203 == 1'd0)))) begin
        grp_awgn_real4_fu_580_ap_ce = 1'b1;
    end else begin
        grp_awgn_real4_fu_580_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op130_read_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((hard_data_V_V_0_sel == 1'b1)) begin
        hard_data_V_V_0_data_out = hard_data_V_V_0_payload_B;
    end else begin
        hard_data_V_V_0_data_out = hard_data_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_10_reg_2207 == 1'd1) & (tmp_9_reg_2203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_V_TDATA_blk_n = hard_data_V_V_0_state[1'd0];
    end else begin
        hard_data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_9_fu_968_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_9_fu_968_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((ctrl_out_V_1_ack_in == 1'b0) | (chan_data_4_V_1_ack_in == 1'b0) | (chan_data_3_V_1_ack_in == 1'b0) | (chan_data_2_V_1_ack_in == 1'b0) | (chan_data_1_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign QAM16_LUT_M_imag_V_address0 = tmp_4_i_fu_1280_p1;

assign QAM16_LUT_M_imag_V_address1 = tmp_1_i_fu_1292_p1;

assign QAM16_LUT_M_imag_V_address2 = tmp_7_i_fu_1302_p1;

assign QAM16_LUT_M_imag_V_address3 = tmp_3_i_fu_1312_p1;

assign QAM16_LUT_M_real_V_address0 = tmp_4_i_fu_1280_p1;

assign QAM16_LUT_M_real_V_address1 = tmp_1_i_fu_1292_p1;

assign QAM16_LUT_M_real_V_address2 = tmp_7_i_fu_1302_p1;

assign QAM16_LUT_M_real_V_address3 = tmp_3_i_fu_1312_p1;

assign QAM64_LUT_M_imag_V_address0 = tmp_5_i_fu_1286_p1;

assign QAM64_LUT_M_imag_V_address1 = tmp_2_i_fu_1297_p1;

assign QAM64_LUT_M_imag_V_address2 = tmp_8_i_fu_1307_p1;

assign QAM64_LUT_M_imag_V_address3 = tmp_4_i1_fu_1317_p1;

assign QAM64_LUT_M_real_V_address0 = tmp_5_i_fu_1286_p1;

assign QAM64_LUT_M_real_V_address1 = tmp_2_i_fu_1297_p1;

assign QAM64_LUT_M_real_V_address2 = tmp_8_i_fu_1307_p1;

assign QAM64_LUT_M_real_V_address3 = tmp_4_i1_fu_1317_p1;

assign Range1_all_ones_fu_837_p2 = ((p_Result_4_reg_2101 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_842_p2 = ((p_Result_4_reg_2101 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op130_read_state6 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_predicate_op130_read_state6 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_predicate_op130_read_state6 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = (((tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (chan_data_4_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (chan_data_3_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (chan_data_2_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter15_reg == 1'd0) & (chan_data_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = (((tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (chan_data_4_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (chan_data_3_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (chan_data_2_V_1_ack_in == 1'b0)) | ((tmp_9_reg_2203_pp0_iter16_reg == 1'd0) & (chan_data_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23 = ((ctrl_out_V_1_ack_in == 1'b0) | (chan_data_4_V_1_ack_in == 1'b0) | (chan_data_3_V_1_ack_in == 1'b0) | (chan_data_2_V_1_ack_in == 1'b0) | (chan_data_1_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((ap_predicate_op130_read_state6 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1129 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_5_reg_492 = 'bx;

always @ (*) begin
    ap_predicate_op130_read_state6 = ((tmp_10_reg_2207 == 1'd1) & (tmp_9_reg_2203 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign awgn_snr_V_fu_918_p3 = ((brmerge_fu_898_p2[0:0] === 1'b1) ? p_mux_fu_904_p3 : p_s_fu_911_p3);

assign brmerge_fu_898_p2 = (p_39_demorgan_i_not_fu_892_p2 | neg_src_not_fu_880_p2);

assign brmerge_i_i_not_fu_886_p2 = (p_39_demorgan_i_fu_870_p2 & neg_src_not_fu_880_p2);

assign carry_fu_797_p2 = (tmp_2_fu_791_p2 & tmp_13_fu_769_p3);

assign cast1_fu_1947_p1 = $signed(tmp_2_1_fu_1939_p3);

assign cast2_fu_1960_p1 = $signed(tmp_3_1_fu_1952_p3);

assign cast3_fu_1973_p1 = $signed(tmp_4_1_fu_1965_p3);

assign cast4_fu_1986_p1 = $signed(tmp_5_1_fu_1978_p3);

assign chan_data_1_V_1_ack_in = chan_data_1_V_1_state[1'd1];

assign chan_data_1_V_1_ack_out = chan_data_1_V_TREADY;

assign chan_data_1_V_1_load_A = (~chan_data_1_V_1_sel_wr & chan_data_1_V_1_state_cmp_full);

assign chan_data_1_V_1_load_B = (chan_data_1_V_1_state_cmp_full & chan_data_1_V_1_sel_wr);

assign chan_data_1_V_1_sel = chan_data_1_V_1_sel_rd;

assign chan_data_1_V_1_state_cmp_full = ((chan_data_1_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_1_V_1_vld_out = chan_data_1_V_1_state[1'd0];

assign chan_data_1_V_TDATA = chan_data_1_V_1_data_out;

assign chan_data_1_V_TVALID = chan_data_1_V_1_state[1'd0];

assign chan_data_2_V_1_ack_in = chan_data_2_V_1_state[1'd1];

assign chan_data_2_V_1_ack_out = chan_data_2_V_TREADY;

assign chan_data_2_V_1_load_A = (~chan_data_2_V_1_sel_wr & chan_data_2_V_1_state_cmp_full);

assign chan_data_2_V_1_load_B = (chan_data_2_V_1_state_cmp_full & chan_data_2_V_1_sel_wr);

assign chan_data_2_V_1_sel = chan_data_2_V_1_sel_rd;

assign chan_data_2_V_1_state_cmp_full = ((chan_data_2_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_2_V_1_vld_out = chan_data_2_V_1_state[1'd0];

assign chan_data_2_V_TDATA = chan_data_2_V_1_data_out;

assign chan_data_2_V_TVALID = chan_data_2_V_1_state[1'd0];

assign chan_data_3_V_1_ack_in = chan_data_3_V_1_state[1'd1];

assign chan_data_3_V_1_ack_out = chan_data_3_V_TREADY;

assign chan_data_3_V_1_load_A = (~chan_data_3_V_1_sel_wr & chan_data_3_V_1_state_cmp_full);

assign chan_data_3_V_1_load_B = (chan_data_3_V_1_state_cmp_full & chan_data_3_V_1_sel_wr);

assign chan_data_3_V_1_sel = chan_data_3_V_1_sel_rd;

assign chan_data_3_V_1_state_cmp_full = ((chan_data_3_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_3_V_1_vld_out = chan_data_3_V_1_state[1'd0];

assign chan_data_3_V_TDATA = chan_data_3_V_1_data_out;

assign chan_data_3_V_TVALID = chan_data_3_V_1_state[1'd0];

assign chan_data_4_V_1_ack_in = chan_data_4_V_1_state[1'd1];

assign chan_data_4_V_1_ack_out = chan_data_4_V_TREADY;

assign chan_data_4_V_1_load_A = (~chan_data_4_V_1_sel_wr & chan_data_4_V_1_state_cmp_full);

assign chan_data_4_V_1_load_B = (chan_data_4_V_1_state_cmp_full & chan_data_4_V_1_sel_wr);

assign chan_data_4_V_1_sel = chan_data_4_V_1_sel_rd;

assign chan_data_4_V_1_state_cmp_full = ((chan_data_4_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_4_V_1_vld_out = chan_data_4_V_1_state[1'd0];

assign chan_data_4_V_TDATA = chan_data_4_V_1_data_out;

assign chan_data_4_V_TVALID = chan_data_4_V_1_state[1'd0];

assign channel_data_M_imag_11_fu_1530_p1 = $signed(QAM16_LUT_M_imag_V_q2);

assign channel_data_M_imag_2_fu_1364_p1 = $signed(QAM16_LUT_M_imag_V_q0);

assign channel_data_M_imag_3_fu_1613_p1 = $signed(QAM16_LUT_M_imag_V_q3);

assign channel_data_M_imag_6_fu_1447_p1 = $signed(QAM16_LUT_M_imag_V_q1);

assign channel_data_M_real_11_fu_1493_p3 = ((tmp_22_reg_2265_pp0_iter14_reg[0:0] === 1'b1) ? 16'd53950 : 16'd11585);

assign channel_data_M_real_14_fu_1526_p1 = $signed(QAM16_LUT_M_real_V_q2);

assign channel_data_M_real_16_fu_1576_p3 = ((tmp_25_reg_2281_pp0_iter14_reg[0:0] === 1'b1) ? 16'd53950 : 16'd11585);

assign channel_data_M_real_2_fu_1609_p1 = $signed(QAM16_LUT_M_real_V_q3);

assign channel_data_M_real_3_fu_1360_p1 = $signed(QAM16_LUT_M_real_V_q0);

assign channel_data_M_real_6_fu_1410_p3 = ((tmp_19_reg_2249_pp0_iter14_reg[0:0] === 1'b1) ? 16'd53950 : 16'd11585);

assign channel_data_M_real_8_fu_1443_p1 = $signed(QAM16_LUT_M_real_V_q1);

assign channel_data_M_real_fu_1327_p3 = ((tmp_16_reg_2297[0:0] === 1'b1) ? 16'd53950 : 16'd11585);

assign ctrl_in_V_0_ack_in = ctrl_in_V_0_state[1'd1];

assign ctrl_in_V_0_load_A = (~ctrl_in_V_0_sel_wr & ctrl_in_V_0_state_cmp_full);

assign ctrl_in_V_0_load_B = (ctrl_in_V_0_state_cmp_full & ctrl_in_V_0_sel_wr);

assign ctrl_in_V_0_sel = ctrl_in_V_0_sel_rd;

assign ctrl_in_V_0_state_cmp_full = ((ctrl_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ctrl_in_V_0_vld_in = ctrl_in_V_TVALID;

assign ctrl_in_V_0_vld_out = ctrl_in_V_0_state[1'd0];

assign ctrl_in_V_TREADY = ctrl_in_V_0_state[1'd1];

assign ctrl_out_V_1_ack_in = ctrl_out_V_1_state[1'd1];

assign ctrl_out_V_1_ack_out = ctrl_out_V_TREADY;

assign ctrl_out_V_1_load_A = (~ctrl_out_V_1_sel_wr & ctrl_out_V_1_state_cmp_full);

assign ctrl_out_V_1_load_B = (ctrl_out_V_1_state_cmp_full & ctrl_out_V_1_sel_wr);

assign ctrl_out_V_1_sel = ctrl_out_V_1_sel_rd;

assign ctrl_out_V_1_state_cmp_full = ((ctrl_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ctrl_out_V_1_vld_out = ctrl_out_V_1_state[1'd0];

assign ctrl_out_V_TDATA = ctrl_out_V_1_data_out;

assign ctrl_out_V_TVALID = ctrl_out_V_1_state[1'd0];

assign ctrl_snr_V_fu_633_p4 = {{ctrl_in_V_0_data_out[21:5]}};

assign deleted_zeros_fu_847_p3 = ((carry_reg_2095[0:0] === 1'b1) ? Range1_all_ones_fu_837_p2 : Range1_all_zeros_fu_842_p2);

assign err_sample_imag_1_V_1_fu_1841_p2 = ($signed(p_Val2_7_fu_1687_p4) + $signed(err_sample_imag_1_V_fu_1814_p1));

assign err_sample_imag_1_V_3_fu_1890_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_imag_1_V_fu_1814_p1 : err_sample_imag_1_V_1_fu_1841_p2);

assign err_sample_imag_1_V_fu_1814_p1 = $signed(p_Val2_37_reg_2388);

assign err_sample_imag_2_V_1_fu_1853_p2 = ($signed(p_Val2_11_fu_1725_p4) + $signed(err_sample_imag_2_V_fu_1820_p1));

assign err_sample_imag_2_V_3_fu_1904_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_imag_2_V_fu_1820_p1 : err_sample_imag_2_V_1_fu_1853_p2);

assign err_sample_imag_2_V_fu_1820_p1 = $signed(p_Val2_22_reg_2398);

assign err_sample_imag_3_V_1_fu_1865_p2 = ($signed(p_Val2_15_fu_1763_p4) + $signed(err_sample_imag_3_V_fu_1826_p1));

assign err_sample_imag_3_V_3_fu_1918_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_imag_3_V_fu_1826_p1 : err_sample_imag_3_V_1_fu_1865_p2);

assign err_sample_imag_3_V_fu_1826_p1 = $signed(p_Val2_24_reg_2408);

assign err_sample_imag_4_V_1_fu_1877_p2 = ($signed(p_Val2_19_fu_1801_p4) + $signed(err_sample_imag_4_V_fu_1832_p1));

assign err_sample_imag_4_V_3_fu_1932_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_imag_4_V_fu_1832_p1 : err_sample_imag_4_V_1_fu_1877_p2);

assign err_sample_imag_4_V_fu_1832_p1 = $signed(p_Val2_26_reg_2418);

assign err_sample_real_1_V_1_fu_1835_p2 = ($signed(p_Val2_36_fu_1668_p4) + $signed(err_sample_real_1_V_fu_1811_p1));

assign err_sample_real_1_V_3_fu_1883_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_real_1_V_fu_1811_p1 : err_sample_real_1_V_1_fu_1835_p2);

assign err_sample_real_1_V_fu_1811_p1 = $signed(p_Val2_21_reg_2393);

assign err_sample_real_2_V_1_fu_1847_p2 = ($signed(p_Val2_9_fu_1706_p4) + $signed(err_sample_real_2_V_fu_1817_p1));

assign err_sample_real_2_V_3_fu_1897_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_real_2_V_fu_1817_p1 : err_sample_real_2_V_1_fu_1847_p2);

assign err_sample_real_2_V_fu_1817_p1 = $signed(p_Val2_23_reg_2403);

assign err_sample_real_3_V_1_fu_1859_p2 = ($signed(p_Val2_13_fu_1744_p4) + $signed(err_sample_real_3_V_fu_1823_p1));

assign err_sample_real_3_V_3_fu_1911_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_real_3_V_fu_1823_p1 : err_sample_real_3_V_1_fu_1859_p2);

assign err_sample_real_3_V_fu_1823_p1 = $signed(p_Val2_25_reg_2413);

assign err_sample_real_4_V_1_fu_1871_p2 = ($signed(p_Val2_17_fu_1782_p4) + $signed(err_sample_real_4_V_fu_1829_p1));

assign err_sample_real_4_V_3_fu_1925_p3 = ((ctrl_skip_chan_V_reg_2032[0:0] === 1'b1) ? err_sample_real_4_V_fu_1829_p1 : err_sample_real_4_V_1_fu_1871_p2);

assign err_sample_real_4_V_fu_1829_p1 = $signed(p_Val2_27_reg_2423);

assign grp_awgn_imag1_fu_515_ap_start = grp_awgn_imag1_fu_515_ap_start_reg;

assign grp_awgn_imag2_fu_541_ap_start = grp_awgn_imag2_fu_541_ap_start_reg;

assign grp_awgn_imag3_fu_567_ap_start = grp_awgn_imag3_fu_567_ap_start_reg;

assign grp_awgn_imag4_fu_593_ap_start = grp_awgn_imag4_fu_593_ap_start_reg;

assign grp_awgn_real1_fu_502_ap_start = grp_awgn_real1_fu_502_ap_start_reg;

assign grp_awgn_real2_fu_528_ap_start = grp_awgn_real2_fu_528_ap_start_reg;

assign grp_awgn_real3_fu_554_ap_start = grp_awgn_real3_fu_554_ap_start_reg;

assign grp_awgn_real4_fu_580_ap_start = grp_awgn_real4_fu_580_ap_start_reg;

assign hard_data_V_V_0_ack_in = hard_data_V_V_0_state[1'd1];

assign hard_data_V_V_0_load_A = (hard_data_V_V_0_state_cmp_full & ~hard_data_V_V_0_sel_wr);

assign hard_data_V_V_0_load_B = (hard_data_V_V_0_state_cmp_full & hard_data_V_V_0_sel_wr);

assign hard_data_V_V_0_sel = hard_data_V_V_0_sel_rd;

assign hard_data_V_V_0_state_cmp_full = ((hard_data_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_V_V_0_vld_in = hard_data_V_V_TVALID;

assign hard_data_V_V_0_vld_out = hard_data_V_V_0_state[1'd0];

assign hard_data_V_V_TREADY = hard_data_V_V_0_state[1'd1];

assign neg_src_fu_865_p2 = (tmp_3_fu_859_p2 & signbit_reg_2082);

assign neg_src_not_fu_880_p2 = (signbit_not_fu_875_p2 | p_38_i_fu_854_p2);

assign newSel143_cast_cast_fu_706_p3 = ((tmp_8_reg_2059[0:0] === 1'b1) ? 17'd118741 : 17'd0);

assign newSel_fu_699_p3 = ((sel_tmp2_reg_2065[0:0] === 1'b1) ? 17'd106411 : 17'd94081);

assign or_cond_fu_690_p2 = (tmp_6_fu_658_p2 | sel_tmp2_fu_684_p2);

assign p_38_i_fu_854_p2 = (carry_reg_2095 & Range1_all_ones_fu_837_p2);

assign p_39_demorgan_i_fu_870_p2 = (signbit_reg_2082 | deleted_zeros_fu_847_p3);

assign p_39_demorgan_i_not_fu_892_p2 = (p_39_demorgan_i_fu_870_p2 ^ 1'd1);

assign p_8_cast_fu_696_p1 = tmp_8_reg_2059;

assign p_Val2_10_fu_1720_p2 = tmp_29_cast_fu_1716_p1 << sh_assign_cast_reg_2107;

assign p_Val2_11_fu_1725_p4 = {{p_Val2_10_fu_1720_p2[20:2]}};

assign p_Val2_12_fu_1739_p2 = tmp_32_cast_fu_1735_p1 << sh_assign_cast_reg_2107;

assign p_Val2_13_fu_1744_p4 = {{p_Val2_12_fu_1739_p2[20:2]}};

assign p_Val2_14_fu_1758_p2 = tmp_35_cast_fu_1754_p1 << sh_assign_cast_reg_2107;

assign p_Val2_15_fu_1763_p4 = {{p_Val2_14_fu_1758_p2[20:2]}};

assign p_Val2_16_fu_1777_p2 = tmp_38_cast_fu_1773_p1 << sh_assign_cast_reg_2107;

assign p_Val2_17_fu_1782_p4 = {{p_Val2_16_fu_1777_p2[20:2]}};

assign p_Val2_18_fu_1796_p2 = tmp_41_cast_fu_1792_p1 << sh_assign_cast_reg_2107;

assign p_Val2_19_fu_1801_p4 = {{p_Val2_18_fu_1796_p2[20:2]}};

assign p_Val2_1_fu_713_p3 = ((or_cond_reg_2071[0:0] === 1'b1) ? newSel_fu_699_p3 : newSel143_cast_cast_fu_706_p3);

assign p_Val2_21_fu_1403_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_fu_1327_p3 : sel_tmp13_fu_1396_p3);

assign p_Val2_22_fu_1465_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_6_fu_1410_p3 : sel_tmp15_fu_1458_p3);

assign p_Val2_23_fu_1486_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_6_fu_1410_p3 : sel_tmp17_fu_1479_p3);

assign p_Val2_24_fu_1548_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_11_fu_1493_p3 : sel_tmp19_fu_1541_p3);

assign p_Val2_25_fu_1569_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_11_fu_1493_p3 : sel_tmp21_fu_1562_p3);

assign p_Val2_26_fu_1631_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_16_fu_1576_p3 : sel_tmp23_fu_1624_p3);

assign p_Val2_27_fu_1652_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_16_fu_1576_p3 : sel_tmp25_fu_1645_p3);

assign p_Val2_35_fu_1663_p2 = tmp_cast_fu_1659_p1 << sh_assign_cast_reg_2107;

assign p_Val2_36_fu_1668_p4 = {{p_Val2_35_fu_1663_p2[20:2]}};

assign p_Val2_37_fu_1382_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? channel_data_M_real_fu_1327_p3 : sel_tmp11_fu_1375_p3);

assign p_Val2_38_fu_1178_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? symbol_4_V_fu_1041_p4 : sel_tmp8_fu_1171_p3);

assign p_Val2_3_fu_747_p4 = {{snr_mod_V_fu_734_p2[14:7]}};

assign p_Val2_4_fu_777_p2 = (tmp_s_fu_765_p1 + p_Val2_3_fu_747_p4);

assign p_Val2_6_fu_1682_p2 = tmp_23_cast_fu_1678_p1 << sh_assign_cast_reg_2107;

assign p_Val2_7_fu_1687_p4 = {{p_Val2_6_fu_1682_p2[20:2]}};

assign p_Val2_8_fu_1701_p2 = tmp_26_cast_fu_1697_p1 << sh_assign_cast_reg_2107;

assign p_Val2_9_fu_1706_p4 = {{p_Val2_8_fu_1701_p2[20:2]}};

assign p_mux_fu_904_p3 = ((brmerge_i_i_not_fu_886_p2[0:0] === 1'b1) ? p_Val2_4_reg_2089 : 8'd255);

assign p_s_fu_911_p3 = ((neg_src_fu_865_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_4_reg_2089);

assign r_V_fu_1185_p2 = ap_phi_mux_p_Val2_5_phi_fu_495_p4 >> tmp_5_reg_2137;

assign remaining_bits_1_fu_992_p2 = (tmp_20_cast_reg_2142 + remaining_bits_fu_240);

assign remaining_bits_2_fu_982_p2 = (remaining_bits_fu_240 - tmp_13_cast_reg_2131);

assign sel_tmp10_fu_1368_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_imag_2_fu_1364_p1 : QAM64_LUT_M_imag_V_q0);

assign sel_tmp11_fu_1375_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_imag_fu_1347_p6 : sel_tmp10_fu_1368_p3);

assign sel_tmp12_fu_1389_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_real_3_fu_1360_p1 : QAM64_LUT_M_real_V_q0);

assign sel_tmp13_fu_1396_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_real_1_fu_1334_p6 : sel_tmp12_fu_1389_p3);

assign sel_tmp14_fu_1451_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_imag_6_fu_1447_p1 : QAM64_LUT_M_imag_V_q1);

assign sel_tmp15_fu_1458_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_imag_5_fu_1430_p6 : sel_tmp14_fu_1451_p3);

assign sel_tmp16_fu_1472_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_real_8_fu_1443_p1 : QAM64_LUT_M_real_V_q1);

assign sel_tmp17_fu_1479_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_real_7_fu_1417_p6 : sel_tmp16_fu_1472_p3);

assign sel_tmp18_fu_1534_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_imag_11_fu_1530_p1 : QAM64_LUT_M_imag_V_q2);

assign sel_tmp19_fu_1541_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_imag_9_fu_1513_p6 : sel_tmp18_fu_1534_p3);

assign sel_tmp1_fu_678_p2 = (tmp_6_fu_658_p2 ^ 1'd1);

assign sel_tmp20_fu_1555_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_real_14_fu_1526_p1 : QAM64_LUT_M_real_V_q2);

assign sel_tmp21_fu_1562_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_real_12_fu_1500_p6 : sel_tmp20_fu_1555_p3);

assign sel_tmp22_fu_1617_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_imag_3_fu_1613_p1 : QAM64_LUT_M_imag_V_q3);

assign sel_tmp23_fu_1624_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_imag_13_fu_1596_p6 : sel_tmp22_fu_1617_p3);

assign sel_tmp24_fu_1638_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? channel_data_M_real_2_fu_1609_p1 : QAM64_LUT_M_real_V_q3);

assign sel_tmp25_fu_1645_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? channel_data_M_real_17_fu_1583_p6 : sel_tmp24_fu_1638_p3);

assign sel_tmp2_fu_684_p2 = (tmp_fu_664_p3 & sel_tmp1_fu_678_p2);

assign sel_tmp3_fu_720_p3 = ((sel_tmp2_reg_2065[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign sel_tmp4_fu_1157_p3 = ((sel_tmp_reg_2147[0:0] === 1'b1) ? symbol_4_V_2_fu_1091_p4 : p_Result_s_fu_224);

assign sel_tmp5_fu_953_p2 = ((ctrl_mod_type_V_reg_2023 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_1164_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? 6'd0 : sel_tmp4_fu_1157_p3);

assign sel_tmp7_fu_958_p2 = ((ctrl_mod_type_V_reg_2023 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_1171_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? symbol_4_V_3_fu_1061_p4 : sel_tmp6_fu_1164_p3);

assign sel_tmp9_fu_963_p2 = ((ctrl_mod_type_V_reg_2023 == 3'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_948_p2 = ((ctrl_mod_type_V_reg_2023 == 3'd3) ? 1'b1 : 1'b0);

assign sh_assign_cast_fu_834_p1 = sh_assign_reg_2077;

assign sh_assign_fu_727_p3 = ((or_cond_reg_2071[0:0] === 1'b1) ? sel_tmp3_fu_720_p3 : p_8_cast_fu_696_p1);

assign signbit_not_fu_875_p2 = (signbit_reg_2082 ^ 1'd1);

assign snr_mod_V_fu_734_p2 = (ctrl_snr_V_reg_2044 - p_Val2_1_fu_713_p3);

assign symbol_1_V_1_fu_1244_p3 = ((sel_tmp_reg_2147[0:0] === 1'b1) ? symbol_1_V_reg_2221_pp0_iter13_reg : p_Result_3_fu_236);

assign symbol_1_V_2_fu_1250_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? symbol_1_V_reg_2221_pp0_iter13_reg : symbol_1_V_1_fu_1244_p3);

assign symbol_1_V_3_fu_1256_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? symbol_1_V_reg_2221_pp0_iter13_reg : symbol_1_V_2_fu_1250_p3);

assign symbol_1_V_5_fu_1262_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? symbol_1_V_reg_2221_pp0_iter13_reg : symbol_1_V_3_fu_1256_p3);

assign symbol_1_V_fu_1017_p1 = ap_phi_mux_p_Val2_5_phi_fu_495_p4[5:0];

assign symbol_2_V_4_fu_1101_p3 = ((sel_tmp_reg_2147[0:0] === 1'b1) ? symbol_4_V_3_fu_1061_p4 : p_Result_2_fu_232);

assign symbol_2_V_5_fu_1108_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? symbol_3_V_9_fu_1051_p4 : symbol_2_V_4_fu_1101_p3);

assign symbol_2_V_6_fu_1115_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? symbol_3_V_8_fu_1031_p4 : symbol_2_V_5_fu_1108_p3);

assign symbol_2_V_8_fu_1122_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? symbol_2_V_fu_1021_p4 : symbol_2_V_6_fu_1115_p3);

assign symbol_2_V_fu_1021_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[6:1]}};

assign symbol_3_V_10_fu_1150_p3 = ((sel_tmp9_reg_2187[0:0] === 1'b1) ? symbol_3_V_8_fu_1031_p4 : symbol_3_V_4_fu_1143_p3);

assign symbol_3_V_1_fu_1081_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[17:12]}};

assign symbol_3_V_2_fu_1129_p3 = ((sel_tmp_reg_2147[0:0] === 1'b1) ? symbol_3_V_1_fu_1081_p4 : p_Result_1_fu_228);

assign symbol_3_V_3_fu_1136_p3 = ((sel_tmp5_reg_2155[0:0] === 1'b1) ? symbol_3_V_fu_1071_p4 : symbol_3_V_2_fu_1129_p3);

assign symbol_3_V_4_fu_1143_p3 = ((sel_tmp7_reg_2171[0:0] === 1'b1) ? symbol_3_V_9_fu_1051_p4 : symbol_3_V_3_fu_1136_p3);

assign symbol_3_V_8_fu_1031_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[7:2]}};

assign symbol_3_V_9_fu_1051_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[9:4]}};

assign symbol_3_V_fu_1071_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[13:8]}};

assign symbol_4_V_2_fu_1091_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[23:18]}};

assign symbol_4_V_3_fu_1061_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[11:6]}};

assign symbol_4_V_fu_1041_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_495_p4[8:3]}};

assign symbols_V_1_fu_1002_p2 = ($signed(14'd16383) + $signed(symbols_reg_483));

assign tmp_10_fu_977_p2 = (($signed(remaining_bits_fu_240) < $signed(tmp_13_cast_reg_2131)) ? 1'b1 : 1'b0);

assign tmp_12_fu_757_p3 = snr_mod_V_fu_734_p2[32'd6];

assign tmp_13_cast_fu_926_p1 = p_2_fu_813_p10;

assign tmp_13_fu_769_p3 = snr_mod_V_fu_734_p2[32'd14];

assign tmp_14_cast_fu_930_p1 = p_2_fu_813_p10;

assign tmp_14_fu_783_p3 = p_Val2_4_fu_777_p2[32'd7];

assign tmp_16_fu_1268_p1 = symbol_1_V_5_fu_1262_p3[0:0];

assign tmp_17_fu_1272_p1 = symbol_1_V_5_fu_1262_p3[1:0];

assign tmp_18_fu_1276_p1 = symbol_1_V_5_fu_1262_p3[3:0];

assign tmp_19_fu_1190_p1 = symbol_2_V_8_fu_1122_p3[0:0];

assign tmp_1_cast_fu_653_p1 = $signed(tmp_1_fu_611_p1);

assign tmp_1_fu_611_p1 = ctrl_in_V_0_data_out[57:0];

assign tmp_1_i_fu_1292_p1 = tmp_21_reg_2260_pp0_iter13_reg;

assign tmp_20_cast_fu_944_p1 = tmp_4_fu_938_p2;

assign tmp_20_fu_1194_p1 = symbol_2_V_8_fu_1122_p3[1:0];

assign tmp_21_fu_1198_p1 = symbol_2_V_8_fu_1122_p3[3:0];

assign tmp_22_fu_1202_p1 = symbol_3_V_10_fu_1150_p3[0:0];

assign tmp_23_cast_fu_1678_p1 = $signed(grp_awgn_imag1_fu_515_ap_return);

assign tmp_23_fu_1206_p1 = symbol_3_V_10_fu_1150_p3[1:0];

assign tmp_24_fu_1210_p1 = symbol_3_V_10_fu_1150_p3[3:0];

assign tmp_25_fu_1214_p1 = p_Val2_38_fu_1178_p3[0:0];

assign tmp_26_cast_fu_1697_p1 = $signed(grp_awgn_real2_fu_528_ap_return);

assign tmp_26_fu_1218_p1 = p_Val2_38_fu_1178_p3[1:0];

assign tmp_27_fu_1222_p1 = p_Val2_38_fu_1178_p3[3:0];

assign tmp_29_cast_fu_1716_p1 = $signed(grp_awgn_imag2_fu_541_ap_return);

assign tmp_2_1_fu_1939_p3 = {{err_sample_imag_1_V_3_fu_1890_p3}, {err_sample_real_1_V_3_fu_1883_p3}};

assign tmp_2_fu_791_p2 = (tmp_14_fu_783_p3 ^ 1'd1);

assign tmp_2_i_fu_1297_p1 = symbol_2_V_8_reg_2229_pp0_iter13_reg;

assign tmp_32_cast_fu_1735_p1 = $signed(grp_awgn_real3_fu_554_ap_return);

assign tmp_35_cast_fu_1754_p1 = $signed(grp_awgn_imag3_fu_567_ap_return);

assign tmp_38_cast_fu_1773_p1 = $signed(grp_awgn_real4_fu_580_ap_return);

assign tmp_3_1_fu_1952_p3 = {{err_sample_imag_2_V_3_fu_1904_p3}, {err_sample_real_2_V_3_fu_1897_p3}};

assign tmp_3_fu_859_p2 = (p_38_i_fu_854_p2 ^ 1'd1);

assign tmp_3_i_fu_1312_p1 = tmp_27_reg_2292_pp0_iter13_reg;

assign tmp_41_cast_fu_1792_p1 = $signed(grp_awgn_imag4_fu_593_ap_return);

assign tmp_4_1_fu_1965_p3 = {{err_sample_imag_3_V_3_fu_1918_p3}, {err_sample_real_3_V_3_fu_1911_p3}};

assign tmp_4_fu_938_p2 = ($signed(7'd96) - $signed(tmp_14_cast_fu_930_p1));

assign tmp_4_i1_fu_1317_p1 = p_Val2_38_reg_2239_pp0_iter13_reg;

assign tmp_4_i_fu_1280_p1 = tmp_18_fu_1276_p1;

assign tmp_5_1_fu_1978_p3 = {{err_sample_imag_4_V_3_fu_1932_p3}, {err_sample_real_4_V_3_fu_1925_p3}};

assign tmp_5_fu_934_p1 = p_2_fu_813_p10;

assign tmp_5_i_fu_1286_p1 = symbol_1_V_5_fu_1262_p3;

assign tmp_6_fu_658_p2 = (($signed(ctrl_snr_V_fu_633_p4) < $signed(17'd118741)) ? 1'b1 : 1'b0);

assign tmp_7_i_fu_1302_p1 = tmp_24_reg_2276_pp0_iter13_reg;

assign tmp_8_fu_672_p2 = (($signed(ctrl_snr_V_fu_633_p4) < $signed(17'd12331)) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_1307_p1 = symbol_3_V_10_reg_2234_pp0_iter13_reg;

assign tmp_9_fu_968_p2 = ((symbols_reg_483 == 14'd0) ? 1'b1 : 1'b0);

assign tmp_cast_fu_1659_p1 = $signed(grp_awgn_real1_fu_502_ap_return);

assign tmp_fu_664_p3 = ctrl_in_V_0_data_out[32'd21];

assign tmp_s_fu_765_p1 = tmp_12_fu_757_p3;

always @ (posedge ap_clk) begin
    sh_assign_cast_reg_2107[20:2] <= 19'b0000000000000000000;
    tmp_13_cast_reg_2131[7:6] <= 2'b00;
    tmp_5_reg_2137[95:6] <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_20_cast_reg_2142[7] <= 1'b0;
end

endmodule //mod_and_chan_4x
